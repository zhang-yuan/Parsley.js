{"version":3,"sources":["parsley.min.js","/source/parsley.js","/source/src/parsley/pubsub.js","/source/src/vendor/inputevent.js","/source/src/parsley/utils.js","/source/src/parsley/defaults.js","/source/src/parsley/abstract.js","/source/src/parsley/validator.js","/source/src/parsley/validator_registry.js","/source/src/parsley/ui.js","/source/src/parsley/form.js","/source/src/parsley/factory/constraint.js","/source/src/parsley/field.js","/source/src/parsley/multiple.js","/source/src/parsley/factory.js","/source/src/parsley/main.js","/source/src/parsley/remote.js","/source/src/i18n/en.js","/source/src/parsley.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_slice","prototype","slice","global","factory","exports","module","require","define","amd","parsley","jQuery","qtip","this","$","adapt","fn","context","parsleyAdaptedCallback","args","call","arguments","unshift","apply","o","eventName","name","lastIndexOf","eventPrefix","substr","InputEvent","_this13","globals","window","extend","isNativeEvent","evt","originalEvent","isTrusted","fakeInputEvent","target","trigger","misbehaves","behavesOk","document","on","data","selector","off","install","inputEventPatched","_arr","_i","uninstall","globalID","pastWarnings","ParsleyUtils__ParsleyUtils","attr","$element","namespace","obj","attribute","attributes","regex","RegExp","hasOwnProperty","specified","test","camelize","deserializeValue","value","checkAttr","_checkAttr","is","setAttr","setAttribute","dasherize","String","generateID","num","isNaN","Number","parseJSON","e","str","replace","match","chr","toUpperCase","toLowerCase","warn","_window$console","console","warnOnce","msg","_resetWarnings","trimString","string","namespaceEvents","events","split","map","join","difference","array","remove","result","each","_","elem","indexOf","push","all","promises","when","concat","objectCreate","Object","create","Error","TypeError","ParsleyUtils__default","ParsleyDefaults","inputs","excluded","priorityEnabled","multiple","group","uiEnabled","validationThreshold","focus","triggerAfterFailure","errorClass","successClass","classHandler","ParsleyField","errorsContainer","errorsWrapper","errorTemplate","ParsleyAbstract","__id__","asyncSupport","_pipeAccordingToValidationResult","_this","pipe","r","Deferred","validationResult","reject","resolve","promise","actualizeOptions","options","domOptions","parent","_resetOptions","initOptions","_listeners","queue","subscribe","listenTo","splice","unsubscribe","unsubscribeTo","extraArg","reset","__class__","_resetUI","_trigger","fields","destroy","_destroyUI","removeData","asyncIsValid","force","whenValid","_findRelated","find","requirementConverters","_string","integer","parseInt","number","parseFloat","reference","boolean","object","regexp","_regexp","flags","convertArrayRequirement","m","values","convertRequirement","requirementType","converter","convertExtraOptionRequirement","requirementSpec","extraOptionReader","main","extra","key","ParsleyValidator","spec","validate","requirementFirstArg","validateMultiple","validateNumber","validateString","parseRequirements","requirements","type","isPlainObject","priority","ParsleyValidatorRegistry","validators","catalog","locale","init","typeRegexes","email","digits","alphanum","url","range","decimalPlaces","Math","max","addValidator","Parsley","setLocale","addCatalog","messages","set","addMessage","message","addMessages","nameMessageObject","arg1","arg2","_setValidator","updateValidator","removeValidator","validator","getErrorMessage","constraint","typeMessages","formatMessage","defaultMessage","en","parameters","notblank","required","_ref","undefined","_ref$step","step","_ref$base","base","nb","decimals","toInt","f","round","pow","","pattern","minlength","requirement","maxlength","min","mincheck","maxcheck","check","equalto","refOrValue","$reference","val","ParsleyUI","qtipSetting","show","solo","hide","position","my","at","diffResults","newResult","oldResult","deep","added","kept","found","j","assert","removed","Form","_actualizeTriggers","_this2","onSubmitValidate","onSubmitButton","_focusedField","field","noFocus","Field","_reflowUI","_buildUI","_ui","diff","lastValidationResult","_manageStatusClass","_manageErrorsMessages","_failedOnce","getErrorsMessages","errorMessage","_getErrorMessage","addError","_ref2","_ref2$updateClass","updateClass","_addError","_errorClass","updateError","_ref3","_ref3$updateClass","_updateError","removeError","_ref4","_ref4$updateClass","_removeError","hasConstraints","needsValidation","_successClass","_resetClass","errorsMessagesDisabled","_insertErrorWrapper","$errorsWrapper","addClass","html","qtapi","removeAttr","removeClass","_ref5","_ref6","customConstraintErrorMessage","$errorClassHandler","_manageClassHandler","errorsWrapperId","validationInformationVisible","$handler","$errorsContainer","append","$from","after","_this3","$toBind","event","_eventValidate","getValue","children","ParsleyForm","element","ParsleyForm__statusMapping","pending","resolved","rejected","_this4","$submitSource","_$submitSource","first","prop","whenValidate","state","stopImmediatePropagation","preventDefault","done","_submit","currentTarget","$synthetic","appendTo","Event","_arguments","_ParsleyUtils__default$all$done$fail$always","_this5","_ref7","submitEvent","_refreshFields","_withoutReactualizingFormOptions","fail","always","isValid","_arguments2","_this6","_ref8","_bindFields","_this7","oldFields","fieldsMappedById","not","fieldInstance","Factory","oldActualizeOptions","ConstraintFactory","parsleyField","isDomConstraint","validatorSpec","_validatorRegistry","_parseRequirements","capitalize","cap","instance","_validator","requirementList","_this8","parsleyFormInstance","constraints","constraintsByName","_bindConstraints","parsley_field__statusMapping","_whenValid$always$done$fail$always","_this9","_ref9","refreshConstraints","_isInGroup","_refreshed","_isRequired","validateIfEmpty","inArray","_arguments3","_this10","_ref10","_ref10$force","groupedConstraints","_getGroupedConstraints","_validateConstraint","_this11","_handleWhitespace","addConstraint","removeConstraint","updateConstraint","_bindHtml5Constraints","hasClass","trimValue","whitespace","index","p","sort","a","b","parsley_field","ParsleyMultiple","addElement","$elements","fieldConstraints","has","filter","_init","ParsleyFactory","savedparsleyFormInstance","__version__","bind","isMultiple","handleMultiple","parsleyMultipleInstance","_this12","input","$previouslyRelated","get","doNotStore","parsleyInstance","ParsleyExtend","vernums","jquery","forEach","version","psly","instances","ParsleyConfig","ParsleyUtils","registry","i18n","method","proxy","_window$Parsley","UI","doNotUpdateClass","autoBind","deprecated","listen","callback","unsubscribeAll","emit","_instance","instanceGiven","asyncValidators","default","xhr","status","reverse","addAsyncValidator","ajaxOptions","csr","encodeURIComponent","remoteOptions","param","_remoteCache","ajax","handleXhr","then","inputevent"],"mappings":"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","file":"parsley.min.js","sourcesContent":["/*!\r\n* Parsley.js\r\n* Version 2.4.3 - built Fri, Aug 5th 2016, 10:52 am\r\n* http://parsleyjs.org\r\n* Guillaume Potier - <guillaume@wisembly.com>\r\n* Marc-Andre Lafortune - <petroselinum@marc-andre.ca>\r\n* MIT Licensed\r\n*/\r\n\r\n// The source code below is generated by babel as\r\n// Parsley is written in ECMAScript 6\r\n//\r\nvar _slice = Array.prototype.slice;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery'), require('qtip2')) : typeof define === 'function' && define.amd ? define(['jquery', 'qtip2'], factory) : global.parsley = factory(global.jQuery, global.qtip);\n})(this, function ($, qtip) {\n  'use strict';\n\n  var globalID = 1;\n  var pastWarnings = {};\n\n  var ParsleyUtils__ParsleyUtils = {\n    // Parsley DOM-API\n    // returns object from dom attributes and values\n    attr: function attr($element, namespace, obj) {\n      var i;\n      var attribute;\n      var attributes;\n      var regex = new RegExp('^' + namespace, 'i');\n\n      if ('undefined' === typeof obj) obj = {};else {\n        // Clear all own properties. This won't affect prototype's values\n        for (i in obj) {\n          if (obj.hasOwnProperty(i)) delete obj[i];\n        }\n      }\n\n      if ('undefined' === typeof $element || 'undefined' === typeof $element[0]) return obj;\n\n      attributes = $element[0].attributes;\n      for (i = attributes.length; i--;) {\n        attribute = attributes[i];\n\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n        }\n      }\n\n      return obj;\n    },\n\n    checkAttr: function checkAttr($element, namespace, _checkAttr) {\n      return $element.is('[' + namespace + _checkAttr + ']');\n    },\n\n    setAttr: function setAttr($element, namespace, attr, value) {\n      $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\n    },\n\n    generateID: function generateID() {\n      return '' + globalID++;\n    },\n\n    /** Third party functions **/\n    // Zepto deserialize function\n    deserializeValue: function deserializeValue(value) {\n      var num;\n\n      try {\n        return value ? value == \"true\" || (value == \"false\" ? false : value == \"null\" ? null : !isNaN(num = Number(value)) ? num : /^[\\[\\{]/.test(value) ? $.parseJSON(value) : value) : value;\n      } catch (e) {\n        return value;\n      }\n    },\n\n    // Zepto camelize function\n    camelize: function camelize(str) {\n      return str.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : '';\n      });\n    },\n\n    // Zepto dasherize function\n    dasherize: function dasherize(str) {\n      return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();\n    },\n\n    warn: function warn() {\n      var _window$console;\n\n      if (window.console && 'function' === typeof window.console.warn) (_window$console = window.console).warn.apply(_window$console, arguments);\n    },\n\n    warnOnce: function warnOnce(msg) {\n      if (!pastWarnings[msg]) {\n        pastWarnings[msg] = true;\n        this.warn.apply(this, arguments);\n      }\n    },\n\n    _resetWarnings: function _resetWarnings() {\n      pastWarnings = {};\n    },\n\n    trimString: function trimString(string) {\n      return string.replace(/^\\s+|\\s+$/g, '');\n    },\n\n    namespaceEvents: function namespaceEvents(events, namespace) {\n      events = this.trimString(events || '').split(/\\s+/);\n      if (!events[0]) return '';\n      return $.map(events, function (evt) {\n        return evt + '.' + namespace;\n      }).join(' ');\n    },\n\n    difference: function difference(array, remove) {\n      // This is O(N^2), should be optimized\n      var result = [];\n      $.each(array, function (_, elem) {\n        if (remove.indexOf(elem) == -1) result.push(elem);\n      });\n      return result;\n    },\n\n    // Alter-ego to native Promise.all, but for jQuery\n    all: function all(promises) {\n      // jQuery treats $.when() and $.when(singlePromise) differently; let's avoid that and add spurious elements\n      return $.when.apply($, _toConsumableArray(promises).concat([42, 42]));\n    },\n\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n    objectCreate: Object.create || (function () {\n      var Object = function Object() {};\n      return function (prototype) {\n        if (arguments.length > 1) {\n          throw Error('Second argument not supported');\n        }\n        if (typeof prototype != 'object') {\n          throw TypeError('Argument must be an object');\n        }\n        Object.prototype = prototype;\n        var result = new Object();\n        Object.prototype = null;\n        return result;\n      };\n    })()\n  };\n\n  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;\n\n  // All these options could be overriden and specified directly in DOM using\n  // `data-parsley-` default DOM-API\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\n  var ParsleyDefaults = {\n    // ### General\n\n    // Default data-namespace for DOM API\n    namespace: 'data-parsley-',\n\n    // Supported inputs by default\n    inputs: 'input, textarea, select',\n\n    // Excluded inputs by default\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n    // Stop validating field on highest priority failing constraint\n    priorityEnabled: true,\n\n    // ### Field only\n\n    // identifier used to group together inputs (e.g. radio buttons...)\n    multiple: null,\n\n    // identifier (or array of identifiers) used to validate only a select group of inputs\n    group: null,\n\n    // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\n\n    // Key events threshold before validation\n    validationThreshold: 3,\n\n    // Focused field on form validation error. 'first'|'last'|'none'\n    focus: 'first',\n\n    // event(s) that will trigger validation before first failure. eg: `input`...\n    trigger: false,\n\n    // event(s) that will trigger validation after first failure.\n    triggerAfterFailure: 'input',\n\n    // Class that would be added on every failing validation Parsley field\n    errorClass: 'parsley-error',\n\n    // Same for success validation\n    successClass: 'parsley-success',\n\n    // Return the `$element` that will receive these above success or error classes\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    classHandler: function classHandler(ParsleyField) {},\n\n    // Return the `$element` where errors will be appended\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    errorsContainer: function errorsContainer(ParsleyField) {},\n\n    // ul elem that would receive errors' list\n    errorsWrapper: '<i class=\"parsley-errors-list\"></i>',\n\n    // li elem that would receive error message\n    errorTemplate: '<i></i>'\n  };\n\n  var ParsleyAbstract = function ParsleyAbstract() {\n    this.__id__ = ParsleyUtils__default.generateID();\n  };\n\n  ParsleyAbstract.prototype = {\n    asyncSupport: true, // Deprecated\n\n    _pipeAccordingToValidationResult: function _pipeAccordingToValidationResult() {\n      var _this = this;\n\n      var pipe = function pipe() {\n        var r = $.Deferred();\n        if (true !== _this.validationResult) r.reject();\n        return r.resolve().promise();\n      };\n      return [pipe, pipe];\n    },\n\n    actualizeOptions: function actualizeOptions() {\n      ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);\n      if (this.parent && this.parent.actualizeOptions) this.parent.actualizeOptions();\n      return this;\n    },\n\n    _resetOptions: function _resetOptions(initOptions) {\n      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);\n      this.options = ParsleyUtils__default.objectCreate(this.domOptions);\n      // Shallow copy of ownProperties of initOptions:\n      for (var i in initOptions) {\n        if (initOptions.hasOwnProperty(i)) this.options[i] = initOptions[i];\n      }\n      this.actualizeOptions();\n    },\n\n    _listeners: null,\n\n    // Register a callback for the given event name\n    // Callback is called with context as the first argument and the `this`\n    // The context is the current parsley instance, or window.Parsley if global\n    // A return value of `false` will interrupt the calls\n    on: function on(name, fn) {\n      this._listeners = this._listeners || {};\n      var queue = this._listeners[name] = this._listeners[name] || [];\n      queue.push(fn);\n\n      return this;\n    },\n\n    // Deprecated. Use `on` instead\n    subscribe: function subscribe(name, fn) {\n      $.listenTo(this, name.toLowerCase(), fn);\n    },\n\n    // Unregister a callback (or all if none is given) for the given event name\n    off: function off(name, fn) {\n      var queue = this._listeners && this._listeners[name];\n      if (queue) {\n        if (!fn) {\n          delete this._listeners[name];\n        } else {\n          for (var i = queue.length; i--;) if (queue[i] === fn) queue.splice(i, 1);\n        }\n      }\n      return this;\n    },\n\n    // Deprecated. Use `off`\n    unsubscribe: function unsubscribe(name, fn) {\n      $.unsubscribeTo(this, name.toLowerCase());\n    },\n\n    // Trigger an event of the given name\n    // A return value of `false` interrupts the callback chain\n    // Returns false if execution was interrupted\n    trigger: function trigger(name, target, extraArg) {\n      target = target || this;\n      var queue = this._listeners && this._listeners[name];\n      var result;\n      var parentResult;\n      if (queue) {\n        for (var i = queue.length; i--;) {\n          result = queue[i].call(target, target, extraArg);\n          if (result === false) return result;\n        }\n      }\n      if (this.parent) {\n        return this.parent.trigger(name, target, extraArg);\n      }\n      return true;\n    },\n\n    // Reset UI\n    reset: function reset() {\n      // Field case: just emit a reset event for UI\n      if ('ParsleyForm' !== this.__class__) {\n        this._resetUI();\n        return this._trigger('reset');\n      }\n\n      // Form case: emit a reset event for each field\n      for (var i = 0; i < this.fields.length; i++) this.fields[i].reset();\n\n      this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function destroy() {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      this._destroyUI();\n      if ('ParsleyForm' !== this.__class__) {\n        this.$element.removeData('Parsley');\n        this.$element.removeData('ParsleyFieldMultiple');\n        this._trigger('destroy');\n\n        return;\n      }\n\n      // Form case: destroy all its fields and then destroy stored instance\n      for (var i = 0; i < this.fields.length; i++) this.fields[i].destroy();\n\n      this.$element.removeData('Parsley');\n      this._trigger('destroy');\n    },\n\n    asyncIsValid: function asyncIsValid(group, force) {\n      ParsleyUtils__default.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\n      return this.whenValid({ group: group, force: force });\n    },\n\n    _findRelated: function _findRelated() {\n      return this.options.multiple ? this.parent.$element.find('[' + this.options.namespace + 'multiple=\"' + this.options.multiple + '\"]') : this.$element;\n    }\n  };\n\n  var requirementConverters = {\n    string: function string(_string) {\n      return _string;\n    },\n    integer: function integer(string) {\n      if (isNaN(string)) throw 'Requirement is not an integer: \"' + string + '\"';\n      return parseInt(string, 10);\n    },\n    number: function number(string) {\n      if (isNaN(string)) throw 'Requirement is not a number: \"' + string + '\"';\n      return parseFloat(string);\n    },\n    reference: function reference(string) {\n      // Unused for now\n      var result = $(string);\n      if (result.length === 0) throw 'No such reference: \"' + string + '\"';\n      return result;\n    },\n    boolean: function boolean(string) {\n      return string !== 'false';\n    },\n    object: function object(string) {\n      return ParsleyUtils__default.deserializeValue(string);\n    },\n    regexp: function regexp(_regexp) {\n      var flags = '';\n\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(_regexp)) {\n        // Replace the regexp literal string with the first match group: ([gimy]*)\n        // If no flag is present, this will be a blank string\n        flags = _regexp.replace(/.*\\/([gimy]*)$/, '$1');\n        // Again, replace the regexp literal string with the first match group:\n        // everything excluding the opening and closing slashes and the flags\n        _regexp = _regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n      } else {\n        // Anchor regexp:\n        _regexp = '^' + _regexp + '$';\n      }\n      return new RegExp(_regexp, flags);\n    }\n  };\n\n  var convertArrayRequirement = function convertArrayRequirement(string, length) {\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n    if (!m) throw 'Requirement is not an array: \"' + string + '\"';\n    var values = m[1].split(',').map(ParsleyUtils__default.trimString);\n    if (values.length !== length) throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n    return values;\n  };\n\n  var convertRequirement = function convertRequirement(requirementType, string) {\n    var converter = requirementConverters[requirementType || 'string'];\n    if (!converter) throw 'Unknown requirement specification: \"' + requirementType + '\"';\n    return converter(string);\n  };\n\n  var convertExtraOptionRequirement = function convertExtraOptionRequirement(requirementSpec, string, extraOptionReader) {\n    var main = null;\n    var extra = {};\n    for (var key in requirementSpec) {\n      if (key) {\n        var value = extraOptionReader(key);\n        if ('string' === typeof value) value = convertRequirement(requirementSpec[key], value);\n        extra[key] = value;\n      } else {\n        main = convertRequirement(requirementSpec[key], string);\n      }\n    }\n    return [main, extra];\n  };\n\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\n\n  var ParsleyValidator = function ParsleyValidator(spec) {\n    $.extend(true, this, spec);\n  };\n\n  ParsleyValidator.prototype = {\n    // Returns `true` iff the given `value` is valid according the given requirements.\n    validate: function validate(value, requirementFirstArg) {\n      if (this.fn) {\n        // Legacy style validator\n\n        if (arguments.length > 3) // If more args then value, requirement, instance...\n          requirementFirstArg = [].slice.call(arguments, 1, -1); // Skip first arg (value) and last (instance), combining the rest\n        return this.fn.call(this, value, requirementFirstArg);\n      }\n\n      if ($.isArray(value)) {\n        if (!this.validateMultiple) throw 'Validator `' + this.name + '` does not handle multiple values';\n        return this.validateMultiple.apply(this, arguments);\n      } else {\n        if (this.validateNumber) {\n          if (isNaN(value)) return false;\n          arguments[0] = parseFloat(arguments[0]);\n          return this.validateNumber.apply(this, arguments);\n        }\n        if (this.validateString) {\n          return this.validateString.apply(this, arguments);\n        }\n        throw 'Validator `' + this.name + '` only handles multiple values';\n      }\n    },\n\n    // Parses `requirements` into an array of arguments,\n    // according to `this.requirementType`\n    parseRequirements: function parseRequirements(requirements, extraOptionReader) {\n      if ('string' !== typeof requirements) {\n        // Assume requirement already parsed\n        // but make sure we return an array\n        return $.isArray(requirements) ? requirements : [requirements];\n      }\n      var type = this.requirementType;\n      if ($.isArray(type)) {\n        var values = convertArrayRequirement(requirements, type.length);\n        for (var i = 0; i < values.length; i++) values[i] = convertRequirement(type[i], values[i]);\n        return values;\n      } else if ($.isPlainObject(type)) {\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n      } else {\n        return [convertRequirement(type, requirements)];\n      }\n    },\n    // Defaults:\n    requirementType: 'string',\n\n    priority: 2\n\n  };\n\n  var ParsleyValidatorRegistry = function ParsleyValidatorRegistry(validators, catalog) {\n    this.__class__ = 'ParsleyValidatorRegistry';\n\n    // Default Parsley locale is en\n    this.locale = 'en';\n\n    this.init(validators || {}, catalog || {});\n  };\n\n  var typeRegexes = {\n    email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n    integer: /^-?\\d+$/,\n\n    digits: /^\\d+$/,\n\n    alphanum: /^\\w+$/i,\n\n    url: new RegExp(\"^\" +\n    // protocol identifier\n    \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n    // user:pass authentication\n    \"(?:\\\\S+(?::\\\\S*)?@)?\" + \"(?:\" +\n    // IP address exclusion\n    // private & local networks\n    // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n    // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n    // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n    // IP address dotted notation octets\n    // excludes loopback network 0.0.0.0\n    // excludes reserved space >= 224.0.0.0\n    // excludes network & broacast addresses\n    // (first & last IP address of each class)\n    \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" + \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" + \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" + \"|\" +\n    // host name\n    '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n    // domain name\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n    // TLD identifier\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))' + \")\" +\n    // port number\n    \"(?::\\\\d{2,5})?\" +\n    // resource path\n    \"(?:/\\\\S*)?\" + \"$\", 'i')\n  };\n  typeRegexes.range = typeRegexes.number;\n\n  // See http://stackoverflow.com/a/10454560/8279\n  var decimalPlaces = function decimalPlaces(num) {\n    var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) {\n      return 0;\n    }\n    return Math.max(0,\n    // Number of digits right of decimal point.\n    (match[1] ? match[1].length : 0) - (\n    // Adjust for scientific notation.\n    match[2] ? +match[2] : 0));\n  };\n\n  ParsleyValidatorRegistry.prototype = {\n    init: function init(validators, catalog) {\n      this.catalog = catalog;\n      // Copy prototype's validators:\n      this.validators = $.extend({}, this.validators);\n\n      for (var name in validators) this.addValidator(name, validators[name].fn, validators[name].priority);\n\n      window.Parsley.trigger('parsley:validator:init');\n    },\n\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n    setLocale: function setLocale(locale) {\n      if ('undefined' === typeof this.catalog[locale]) throw new Error(locale + ' is not available in the catalog');\n\n      this.locale = locale;\n\n      return this;\n    },\n\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n    addCatalog: function addCatalog(locale, messages, set) {\n      if ('object' === typeof messages) this.catalog[locale] = messages;\n\n      if (true === set) return this.setLocale(locale);\n\n      return this;\n    },\n\n    // Add a specific message for a given constraint in a given locale\n    addMessage: function addMessage(locale, name, message) {\n      if ('undefined' === typeof this.catalog[locale]) this.catalog[locale] = {};\n\n      this.catalog[locale][name] = message;\n\n      return this;\n    },\n\n    // Add messages for a given locale\n    addMessages: function addMessages(locale, nameMessageObject) {\n      for (var name in nameMessageObject) this.addMessage(locale, name, nameMessageObject[name]);\n\n      return this;\n    },\n\n    // Add a new validator\n    //\n    //    addValidator('custom', {\n    //        requirementType: ['integer', 'integer'],\n    //        validateString: function(value, from, to) {},\n    //        priority: 22,\n    //        messages: {\n    //          en: \"Hey, that's no good\",\n    //          fr: \"Aye aye, pas bon du tout\",\n    //        }\n    //    })\n    //\n    // Old API was addValidator(name, function, priority)\n    //\n    addValidator: function addValidator(name, arg1, arg2) {\n      if (this.validators[name]) ParsleyUtils__default.warn('Validator \"' + name + '\" is already defined.');else if (ParsleyDefaults.hasOwnProperty(name)) {\n        ParsleyUtils__default.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n        return;\n      }\n      return this._setValidator.apply(this, arguments);\n    },\n\n    updateValidator: function updateValidator(name, arg1, arg2) {\n      if (!this.validators[name]) {\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not already defined.');\n        return this.addValidator.apply(this, arguments);\n      }\n      return this._setValidator.apply(this, arguments);\n    },\n\n    removeValidator: function removeValidator(name) {\n      if (!this.validators[name]) ParsleyUtils__default.warn('Validator \"' + name + '\" is not defined.');\n\n      delete this.validators[name];\n\n      return this;\n    },\n\n    _setValidator: function _setValidator(name, validator, priority) {\n      if ('object' !== typeof validator) {\n        // Old style validator, with `fn` and `priority`\n        validator = {\n          fn: validator,\n          priority: priority\n        };\n      }\n      if (!validator.validate) {\n        validator = new ParsleyValidator(validator);\n      }\n      this.validators[name] = validator;\n\n      for (var locale in validator.messages || {}) this.addMessage(locale, name, validator.messages[locale]);\n\n      return this;\n    },\n\n    getErrorMessage: function getErrorMessage(constraint) {\n      var message;\n\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\n      if ('type' === constraint.name) {\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\n        message = typeMessages[constraint.requirements];\n      } else message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n    },\n\n    // Kind of light `sprintf()` implementation\n    formatMessage: function formatMessage(string, parameters) {\n      if ('object' === typeof parameters) {\n        for (var i in parameters) string = this.formatMessage(string, parameters[i]);\n\n        return string;\n      }\n\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n    },\n\n    // Here is the Parsley default validators list.\n    // A validator is an object with the following key values:\n    //  - priority: an integer\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n    // Alternatively, a validator can be a function that returns such an object\n    //\n    validators: {\n      notblank: {\n        validateString: function validateString(value) {\n          return (/\\S/.test(value)\n          );\n        },\n        priority: 2\n      },\n      required: {\n        validateMultiple: function validateMultiple(values) {\n          return values.length > 0;\n        },\n        validateString: function validateString(value) {\n          return (/\\S/.test(value)\n          );\n        },\n        priority: 512\n      },\n      type: {\n        validateString: function validateString(value, type) {\n          var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n          var _ref$step = _ref.step;\n          var step = _ref$step === undefined ? '1' : _ref$step;\n          var _ref$base = _ref.base;\n          var base = _ref$base === undefined ? 0 : _ref$base;\n\n          var regex = typeRegexes[type];\n          if (!regex) {\n            throw new Error('validator type `' + type + '` is not supported');\n          }\n          if (!regex.test(value)) return false;\n          if ('number' === type) {\n            if (!/^any$/i.test(step || '')) {\n              var nb = Number(value);\n              var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\n              if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\n                return false;\n              // Be careful of rounding errors by using integers.\n              var toInt = function toInt(f) {\n                return Math.round(f * Math.pow(10, decimals));\n              };\n              if ((toInt(nb) - toInt(base)) % toInt(step) != 0) return false;\n            }\n          }\n          return true;\n        },\n        requirementType: {\n          '': 'string',\n          step: 'string',\n          base: 'number'\n        },\n        priority: 256\n      },\n      pattern: {\n        validateString: function validateString(value, regexp) {\n          return regexp.test(value);\n        },\n        requirementType: 'regexp',\n        priority: 64\n      },\n      minlength: {\n        validateString: function validateString(value, requirement) {\n          return value.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxlength: {\n        validateString: function validateString(value, requirement) {\n          return value.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      length: {\n        validateString: function validateString(value, min, max) {\n          return value.length >= min && value.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      mincheck: {\n        validateMultiple: function validateMultiple(values, requirement) {\n          return values.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxcheck: {\n        validateMultiple: function validateMultiple(values, requirement) {\n          return values.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      check: {\n        validateMultiple: function validateMultiple(values, min, max) {\n          return values.length >= min && values.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      min: {\n        validateNumber: function validateNumber(value, requirement) {\n          return value >= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      max: {\n        validateNumber: function validateNumber(value, requirement) {\n          return value <= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      range: {\n        validateNumber: function validateNumber(value, min, max) {\n          return value >= min && value <= max;\n        },\n        requirementType: ['number', 'number'],\n        priority: 30\n      },\n      equalto: {\n        validateString: function validateString(value, refOrValue) {\n          var $reference = $(refOrValue);\n          if ($reference.length) return value === $reference.val();else return value === refOrValue;\n        },\n        priority: 256\n      }\n    }\n  };\n\n  var ParsleyUI = {};\n\n  /*custom*/\n  var qtipSetting = {\n    show: {\n      solo: true,\n      hide: 'unfocus'\n    },\n    position: {\n      my: 'left center',\n      at: 'right center'\n    }\n  };\n\n  var diffResults = function diffResults(newResult, oldResult, deep) {\n    var added = [];\n    var kept = [];\n\n    for (var i = 0; i < newResult.length; i++) {\n      var found = false;\n\n      for (var j = 0; j < oldResult.length; j++) if (newResult[i].assert.name === oldResult[j].assert.name) {\n        found = true;\n        break;\n      }\n\n      if (found) kept.push(newResult[i]);else added.push(newResult[i]);\n    }\n\n    return {\n      kept: kept,\n      added: added,\n      removed: !deep ? diffResults(oldResult, newResult, true).added : []\n    };\n  };\n\n  ParsleyUI.Form = {\n\n    _actualizeTriggers: function _actualizeTriggers() {\n      var _this2 = this;\n\n      this.$element.on('submit.Parsley', function (evt) {\n        _this2.onSubmitValidate(evt);\n      });\n      this.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', function (evt) {\n        _this2.onSubmitButton(evt);\n      });\n\n      // UI could be disabled\n      if (false === this.options.uiEnabled) return;\n\n      this.$element.attr('novalidate', '');\n    },\n\n    focus: function focus() {\n      this._focusedField = null;\n\n      if (true === this.validationResult || 'none' === this.options.focus) return null;\n\n      for (var i = 0; i < this.fields.length; i++) {\n        var field = this.fields[i];\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n          this._focusedField = field.$element;\n          if ('first' === this.options.focus) break;\n        }\n      }\n\n      if (null === this._focusedField) return null;\n\n      return this._focusedField.focus();\n    },\n\n    _destroyUI: function _destroyUI() {\n      // Reset all event listeners\n      this.$element.off('.Parsley');\n    }\n\n  };\n\n  ParsleyUI.Field = {\n\n    _reflowUI: function _reflowUI() {\n      this._buildUI();\n\n      // If this field doesn't have an active UI don't bother doing something\n      if (!this._ui) return;\n\n      // Diff between two validation results\n      var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n      // Then store current validation result for next reflow\n      this._ui.lastValidationResult = this.validationResult;\n\n      // Handle valid / invalid / none field class\n      this._manageStatusClass();\n\n      // Add, remove, updated errors messages\n      this._manageErrorsMessages(diff);\n\n      // Triggers impl\n      this._actualizeTriggers();\n\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n      if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\n        this._failedOnce = true;\n        this._actualizeTriggers();\n      }\n    },\n\n    // Returns an array of field's error message(s)\n    getErrorsMessages: function getErrorsMessages() {\n      // No error message, field is valid\n      if (true === this.validationResult) return [];\n\n      var messages = [];\n\n      for (var i = 0; i < this.validationResult.length; i++) messages.push(this.validationResult[i].errorMessage || this._getErrorMessage(this.validationResult[i].assert));\n\n      return messages;\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    addError: function addError(name) {\n      var _ref2 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var message = _ref2.message;\n      var assert = _ref2.assert;\n      var _ref2$updateClass = _ref2.updateClass;\n      var updateClass = _ref2$updateClass === undefined ? true : _ref2$updateClass;\n\n      this._buildUI();\n      this._addError(name, { message: message, assert: assert });\n\n      if (updateClass) this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    updateError: function updateError(name) {\n      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var message = _ref3.message;\n      var assert = _ref3.assert;\n      var _ref3$updateClass = _ref3.updateClass;\n      var updateClass = _ref3$updateClass === undefined ? true : _ref3$updateClass;\n\n      this._buildUI();\n      this._updateError(name, { message: message, assert: assert });\n\n      if (updateClass) this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    removeError: function removeError(name) {\n      var _ref4 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var _ref4$updateClass = _ref4.updateClass;\n      var updateClass = _ref4$updateClass === undefined ? true : _ref4$updateClass;\n\n      this._buildUI();\n      this._removeError(name);\n\n      // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n      if (updateClass) this._manageStatusClass();\n    },\n\n    _manageStatusClass: function _manageStatusClass() {\n      if (this.hasConstraints() && this.needsValidation() && true === this.validationResult) this._successClass();else if (this.validationResult.length > 0) this._errorClass();else this._resetClass();\n    },\n\n    _manageErrorsMessages: function _manageErrorsMessages(diff) {\n      if ('undefined' !== typeof this.options.errorsMessagesDisabled) return;\n\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n      if ('undefined' !== typeof this.options.errorMessage) {\n        if (diff.added.length || diff.kept.length) {\n          this._insertErrorWrapper();\n\n          if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n            // this._ui.$errorsWrapper\n            //   .append(\n            //     $(this.options.errorTemplate)\n            //     .addClass('parsley-custom-error-message')\n            //   );\n            this.$element.attr('title', this.options.errorMessage).qtip(qtipSetting);\n\n          return this._ui.$errorsWrapper.addClass('filled').find('.parsley-custom-error-message').html(this.options.errorMessage);\n        }\n\n        // remove title\n        var qtapi = this.$element.qtip('api');\n        if (qtapi) {\n          qtapi.destroy().removeAttr('title');\n        }\n\n        return this._ui.$errorsWrapper.removeClass('filled').find('.parsley-custom-error-message').remove();\n      }\n\n      // Show, hide, update failing constraints messages\n      for (var i = 0; i < diff.removed.length; i++) this._removeError(diff.removed[i].assert.name);\n\n      for (i = 0; i < diff.added.length; i++) this._addError(diff.added[i].assert.name, { message: diff.added[i].errorMessage, assert: diff.added[i].assert });\n\n      for (i = 0; i < diff.kept.length; i++) this._updateError(diff.kept[i].assert.name, { message: diff.kept[i].errorMessage, assert: diff.kept[i].assert });\n    },\n\n    _addError: function _addError(name, _ref5) {\n      var message = _ref5.message;\n      var assert = _ref5.assert;\n\n      this._insertErrorWrapper();\n      // this._ui.$errorsWrapper\n      //   .addClass('filled')\n      //   .append(\n      //     $(this.options.errorTemplate)\n      //     .addClass('parsley-' + name)\n      //     .html(message || this._getErrorMessage(assert))\n      //   );\n      // use qtip instead of errorTemplate\n      this.$element.attr('title', message || this._getErrorMessage(assert)).qtip(qtipSetting);\n    },\n\n    _updateError: function _updateError(name, _ref6) {\n      var message = _ref6.message;\n      var assert = _ref6.assert;\n\n      this._ui.$errorsWrapper.addClass('filled').find('.parsley-' + name).html(message || this._getErrorMessage(assert));\n    },\n\n    _removeError: function _removeError(name) {\n      this._ui.$errorsWrapper.removeClass('filled').find('.parsley-' + name).remove();\n\n      // remove title\n      var qtapi = this.$element.qtip('api');\n      if (qtapi) {\n        qtapi.destroy().removeAttr('title');\n      }\n    },\n\n    _getErrorMessage: function _getErrorMessage(constraint) {\n      var customConstraintErrorMessage = constraint.name + 'Message';\n\n      if ('undefined' !== typeof this.options[customConstraintErrorMessage]) return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n      return window.Parsley.getErrorMessage(constraint);\n    },\n\n    _buildUI: function _buildUI() {\n      // UI could be already built or disabled\n      if (this._ui || false === this.options.uiEnabled) return;\n\n      var _ui = {};\n\n      // Give field its Parsley id in DOM\n      this.$element.attr(this.options.namespace + 'id', this.__id__);\n\n      /** Generate important UI elements and store them in this **/\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n      _ui.$errorClassHandler = this._manageClassHandler();\n\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n      _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\n      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n      _ui.lastValidationResult = [];\n      _ui.validationInformationVisible = false;\n\n      // Store it in this for later\n      this._ui = _ui;\n    },\n\n    // Determine which element will have `parsley-error` and `parsley-success` classes\n    _manageClassHandler: function _manageClassHandler() {\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n      if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length) return $(this.options.classHandler);\n\n      // Class handled could also be determined by function given in Parsley options\n      var $handler = this.options.classHandler.call(this, this);\n\n      // If this function returned a valid existing DOM element, go for it\n      if ('undefined' !== typeof $handler && $handler.length) return $handler;\n\n      // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\n      if (!this.options.multiple || this.$element.is('select')) return this.$element;\n\n      // But if multiple element (radio, checkbox), that would be their parent\n      return this.$element.parent();\n    },\n\n    _insertErrorWrapper: function _insertErrorWrapper() {\n      var $errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== this._ui.$errorsWrapper.parent().length) return this._ui.$errorsWrapper.parent();\n\n      if ('string' === typeof this.options.errorsContainer) {\n        if ($(this.options.errorsContainer).length) return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);else ParsleyUtils__default.warn('The errors container `' + this.options.errorsContainer + '` does not exist in DOM');\n      } else if ('function' === typeof this.options.errorsContainer) $errorsContainer = this.options.errorsContainer.call(this, this);\n\n      if ('undefined' !== typeof $errorsContainer && $errorsContainer.length) return $errorsContainer.append(this._ui.$errorsWrapper);\n\n      var $from = this.$element;\n      if (this.options.multiple) $from = $from.parent();\n      return $from.after(this._ui.$errorsWrapper);\n    },\n\n    _actualizeTriggers: function _actualizeTriggers() {\n      var _this3 = this;\n\n      var $toBind = this._findRelated();\n      var trigger;\n\n      // Remove Parsley events already bound on this field\n      $toBind.off('.Parsley');\n      if (this._failedOnce) $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), function () {\n        _this3.validate();\n      });else if (trigger = ParsleyUtils__default.namespaceEvents(this.options.trigger, 'Parsley')) {\n        $toBind.on(trigger, function (event) {\n          _this3._eventValidate(event);\n        });\n      }\n    },\n\n    _eventValidate: function _eventValidate(event) {\n      // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n      if (/key|input/.test(event.type)) if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold) return;\n\n      this.validate();\n    },\n\n    _resetUI: function _resetUI() {\n      // Reset all event listeners\n      this._failedOnce = false;\n      this._actualizeTriggers();\n\n      // Nothing to do if UI never initialized for this field\n      if ('undefined' === typeof this._ui) return;\n\n      // Reset all errors' li\n      this._ui.$errorsWrapper.removeClass('filled').children().remove();\n\n      // Reset validation class\n      this._resetClass();\n\n      // Reset validation flags and last validation result\n      this._ui.lastValidationResult = [];\n      this._ui.validationInformationVisible = false;\n    },\n\n    _destroyUI: function _destroyUI() {\n      this._resetUI();\n\n      if ('undefined' !== typeof this._ui) this._ui.$errorsWrapper.remove();\n\n      delete this._ui;\n    },\n\n    _successClass: function _successClass() {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n    },\n    _errorClass: function _errorClass() {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n    },\n    _resetClass: function _resetClass() {\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n    }\n  };\n\n  var ParsleyForm = function ParsleyForm(element, domOptions, options) {\n    this.__class__ = 'ParsleyForm';\n\n    this.$element = $(element);\n    this.domOptions = domOptions;\n    this.options = options;\n    this.parent = window.Parsley;\n\n    this.fields = [];\n    this.validationResult = null;\n  };\n\n  var ParsleyForm__statusMapping = { pending: null, resolved: true, rejected: false };\n\n  ParsleyForm.prototype = {\n    onSubmitValidate: function onSubmitValidate(event) {\n      var _this4 = this;\n\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n      if (true === event.parsley) return;\n\n      // If we didn't come here through a submit button, use the first one in the form\n      var $submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\n      this._$submitSource = null;\n      this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\n      if ($submitSource.is('[formnovalidate]')) return;\n\n      var promise = this.whenValidate({ event: event });\n\n      if ('resolved' === promise.state() && false !== this._trigger('submit')) {\n        // All good, let event go through. We make this distinction because browsers\n        // differ in their handling of `submit` being called from inside a submit event [#1047]\n      } else {\n          // Rejected or pending: cancel this submit\n          event.stopImmediatePropagation();\n          event.preventDefault();\n          if ('pending' === promise.state()) promise.done(function () {\n            _this4._submit($submitSource);\n          });\n        }\n    },\n\n    onSubmitButton: function onSubmitButton(event) {\n      this._$submitSource = $(event.currentTarget);\n    },\n    // internal\n    // _submit submits the form, this time without going through the validations.\n    // Care must be taken to \"fake\" the actual submit button being clicked.\n    _submit: function _submit($submitSource) {\n      if (false === this._trigger('submit')) return;\n      // Add submit button's data\n      if ($submitSource) {\n        var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\n        if (0 === $synthetic.length) $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\n        $synthetic.attr({\n          name: $submitSource.attr('name'),\n          value: $submitSource.attr('value')\n        });\n      }\n\n      this.$element.trigger($.extend($.Event('submit'), { parsley: true }));\n    },\n\n    // Performs validation on fields while triggering events.\n    // @returns `true` if all validations succeeds, `false`\n    // if a failure is immediately detected, or `null`\n    // if dependant on a promise.\n    // Consider using `whenValidate` instead.\n    validate: function validate(options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\n\n        var _arguments = _slice.call(arguments);\n\n        var group = _arguments[0];\n        var force = _arguments[1];\n        var event = _arguments[2];\n\n        options = { group: group, force: force, event: event };\n      }\n      return ParsleyForm__statusMapping[this.whenValidate(options).state()];\n    },\n\n    whenValidate: function whenValidate() {\n      var _ParsleyUtils__default$all$done$fail$always,\n          _this5 = this;\n\n      var _ref7 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var group = _ref7.group;\n      var force = _ref7.force;\n      var event = _ref7.event;\n\n      this.submitEvent = event;\n      if (event) {\n        this.submitEvent = $.extend({}, event, { preventDefault: function preventDefault() {\n            ParsleyUtils__default.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n            _this5.validationResult = false;\n          } });\n      }\n      this.validationResult = true;\n\n      // fire validate event to eventually modify things before every validation\n      this._trigger('validate');\n\n      // Refresh form DOM options and form's fields that could have changed\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(function () {\n        return $.map(_this5.fields, function (field) {\n          return field.whenValidate({ force: force, group: group });\n        });\n      });\n\n      return (_ParsleyUtils__default$all$done$fail$always = ParsleyUtils__default.all(promises).done(function () {\n        _this5._trigger('success');\n      }).fail(function () {\n        _this5.validationResult = false;\n        _this5.focus();\n        _this5._trigger('error');\n      }).always(function () {\n        _this5._trigger('validated');\n      })).pipe.apply(_ParsleyUtils__default$all$done$fail$always, _toConsumableArray(this._pipeAccordingToValidationResult()));\n    },\n\n    // Iterate over refreshed fields, and stop on first failure.\n    // Returns `true` if all fields are valid, `false` if a failure is detected\n    // or `null` if the result depends on an unresolved promise.\n    // Prefer using `whenValid` instead.\n    isValid: function isValid(options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\n\n        var _arguments2 = _slice.call(arguments);\n\n        var group = _arguments2[0];\n        var force = _arguments2[1];\n\n        options = { group: group, force: force };\n      }\n      return ParsleyForm__statusMapping[this.whenValid(options).state()];\n    },\n\n    // Iterate over refreshed fields and validate them.\n    // Returns a promise.\n    // A validation that immediately fails will interrupt the validations.\n    whenValid: function whenValid() {\n      var _this6 = this;\n\n      var _ref8 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var group = _ref8.group;\n      var force = _ref8.force;\n\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(function () {\n        return $.map(_this6.fields, function (field) {\n          return field.whenValid({ group: group, force: force });\n        });\n      });\n      return ParsleyUtils__default.all(promises);\n    },\n\n    _refreshFields: function _refreshFields() {\n      return this.actualizeOptions()._bindFields();\n    },\n\n    _bindFields: function _bindFields() {\n      var _this7 = this;\n\n      var oldFields = this.fields;\n\n      this.fields = [];\n      this.fieldsMappedById = {};\n\n      this._withoutReactualizingFormOptions(function () {\n        _this7.$element.find(_this7.options.inputs).not(_this7.options.excluded).each(function (_, element) {\n          var fieldInstance = new window.Parsley.Factory(element, {}, _this7);\n\n          // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\n          if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && true !== fieldInstance.options.excluded) if ('undefined' === typeof _this7.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\n            _this7.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\n            _this7.fields.push(fieldInstance);\n          }\n        });\n\n        $.each(ParsleyUtils__default.difference(oldFields, _this7.fields), function (_, field) {\n          field._trigger('reset');\n        });\n      });\n      return this;\n    },\n\n    // Internal only.\n    // Looping on a form's fields to do validation or similar\n    // will trigger reactualizing options on all of them, which\n    // in turn will reactualize the form's options.\n    // To avoid calling actualizeOptions so many times on the form\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\n    // the method actualizeOptions on this form while `fn` is called.\n    _withoutReactualizingFormOptions: function _withoutReactualizingFormOptions(fn) {\n      var oldActualizeOptions = this.actualizeOptions;\n      this.actualizeOptions = function () {\n        return this;\n      };\n      var result = fn();\n      this.actualizeOptions = oldActualizeOptions;\n      return result;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    // Returns true iff event is not interrupted and default not prevented.\n    _trigger: function _trigger(eventName) {\n      return this.trigger('form:' + eventName);\n    }\n\n  };\n\n  var ConstraintFactory = function ConstraintFactory(parsleyField, name, requirements, priority, isDomConstraint) {\n    if (!/ParsleyField/.test(parsleyField.__class__)) throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\n\n    var validatorSpec = window.Parsley._validatorRegistry.validators[name];\n    var validator = new ParsleyValidator(validatorSpec);\n\n    $.extend(this, {\n      validator: validator,\n      name: name,\n      requirements: requirements,\n      priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\n      isDomConstraint: true === isDomConstraint\n    });\n    this._parseRequirements(parsleyField.options);\n  };\n\n  var capitalize = function capitalize(str) {\n    var cap = str[0].toUpperCase();\n    return cap + str.slice(1);\n  };\n\n  ConstraintFactory.prototype = {\n    validate: function validate(value, instance) {\n      var _validator;\n\n      return (_validator = this.validator).validate.apply(_validator, [value].concat(_toConsumableArray(this.requirementList), [instance]));\n    },\n\n    _parseRequirements: function _parseRequirements(options) {\n      var _this8 = this;\n\n      this.requirementList = this.validator.parseRequirements(this.requirements, function (key) {\n        return options[_this8.name + capitalize(key)];\n      });\n    }\n  };\n\n  var ParsleyField = function ParsleyField(field, domOptions, options, parsleyFormInstance) {\n    this.__class__ = 'ParsleyField';\n\n    this.$element = $(field);\n\n    // Set parent if we have one\n    if ('undefined' !== typeof parsleyFormInstance) {\n      this.parent = parsleyFormInstance;\n    }\n\n    this.options = options;\n    this.domOptions = domOptions;\n\n    // Initialize some properties\n    this.constraints = [];\n    this.constraintsByName = {};\n    this.validationResult = true;\n\n    // Bind constraints\n    this._bindConstraints();\n  };\n\n  var parsley_field__statusMapping = { pending: null, resolved: true, rejected: false };\n\n  ParsleyField.prototype = {\n    // # Public API\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns `true`, an array of the validators that failed, or\n    // `null` if validation is not finished. Prefer using whenValidate\n    validate: function validate(options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\n        options = { options: options };\n      }\n      var promise = this.whenValidate(options);\n      if (!promise) // If excluded with `group` option\n        return true;\n      switch (promise.state()) {\n        case 'pending':\n          return null;\n        case 'resolved':\n          return true;\n        case 'rejected':\n          return this.validationResult;\n      }\n    },\n\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if field is not in the given `group`.\n    whenValidate: function whenValidate() {\n      var _whenValid$always$done$fail$always,\n          _this9 = this;\n\n      var _ref9 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var force = _ref9.force;\n      var group = _ref9.group;\n\n      // do not validate a field if not the same as given validation group\n      this.refreshConstraints();\n      if (group && !this._isInGroup(group)) return;\n\n      this.value = this.getValue();\n\n      // Field Validate event. `this.value` could be altered for custom needs\n      this._trigger('validate');\n\n      return (_whenValid$always$done$fail$always = this.whenValid({ force: force, value: this.value, _refreshed: true }).always(function () {\n        _this9._reflowUI();\n      }).done(function () {\n        _this9._trigger('success');\n      }).fail(function () {\n        _this9._trigger('error');\n      }).always(function () {\n        _this9._trigger('validated');\n      })).pipe.apply(_whenValid$always$done$fail$always, _toConsumableArray(this._pipeAccordingToValidationResult()));\n    },\n\n    hasConstraints: function hasConstraints() {\n      return 0 !== this.constraints.length;\n    },\n\n    // An empty optional field does not need validation\n    needsValidation: function needsValidation(value) {\n      if ('undefined' === typeof value) value = this.getValue();\n\n      // If a field is empty and not required, it is valid\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty) return false;\n\n      return true;\n    },\n\n    _isInGroup: function _isInGroup(group) {\n      if ($.isArray(this.options.group)) return -1 !== $.inArray(group, this.options.group);\n      return this.options.group === group;\n    },\n\n    // Just validate field. Do not trigger any event.\n    // Returns `true` iff all constraints pass, `false` if there are failures,\n    // or `null` if the result can not be determined yet (depends on a promise)\n    // See also `whenValid`.\n    isValid: function isValid(options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\n\n        var _arguments3 = _slice.call(arguments);\n\n        var force = _arguments3[0];\n        var value = _arguments3[1];\n\n        options = { force: force, value: value };\n      }\n      var promise = this.whenValid(options);\n      if (!promise) // Excluded via `group`\n        return true;\n      return parsley_field__statusMapping[promise.state()];\n    },\n\n    // Just validate field. Do not trigger any event.\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if the field is not in the given `group`.\n    // The argument `force` will force validation of empty fields.\n    // If a `value` is given, it will be validated instead of the value of the input.\n    whenValid: function whenValid() {\n      var _this10 = this;\n\n      var _ref10 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var _ref10$force = _ref10.force;\n      var force = _ref10$force === undefined ? false : _ref10$force;\n      var value = _ref10.value;\n      var group = _ref10.group;\n      var _refreshed = _ref10._refreshed;\n\n      // Recompute options and rebind constraints to have latest changes\n      if (!_refreshed) this.refreshConstraints();\n      // do not validate a field if not the same as given validation group\n      if (group && !this._isInGroup(group)) return;\n\n      this.validationResult = true;\n\n      // A field without constraint is valid\n      if (!this.hasConstraints()) return $.when();\n\n      // Value could be passed as argument, needed to add more power to 'field:validate'\n      if ('undefined' === typeof value || null === value) value = this.getValue();\n\n      if (!this.needsValidation(value) && true !== force) return $.when();\n\n      var groupedConstraints = this._getGroupedConstraints();\n      var promises = [];\n      $.each(groupedConstraints, function (_, constraints) {\n        // Process one group of constraints at a time, we validate the constraints\n        // and combine the promises together.\n        var promise = ParsleyUtils__default.all($.map(constraints, function (constraint) {\n          return _this10._validateConstraint(value, constraint);\n        }));\n        promises.push(promise);\n        if (promise.state() === 'rejected') return false; // Interrupt processing if a group has already failed\n      });\n      return ParsleyUtils__default.all(promises);\n    },\n\n    // @returns a promise\n    _validateConstraint: function _validateConstraint(value, constraint) {\n      var _this11 = this;\n\n      var result = constraint.validate(value, this);\n      // Map false to a failed promise\n      if (false === result) result = $.Deferred().reject();\n      // Make sure we return a promise and that we record failures\n      return ParsleyUtils__default.all([result]).fail(function (errorMessage) {\n        if (!(_this11.validationResult instanceof Array)) _this11.validationResult = [];\n        _this11.validationResult.push({\n          assert: constraint,\n          errorMessage: 'string' === typeof errorMessage && errorMessage\n        });\n      });\n    },\n\n    // @returns Parsley field computed value that could be overrided or configured in DOM\n    getValue: function getValue() {\n      var value;\n\n      // Value could be overriden in DOM or with explicit options\n      if ('function' === typeof this.options.value) value = this.options.value(this);else if ('undefined' !== typeof this.options.value) value = this.options.value;else value = this.$element.val();\n\n      // Handle wrong DOM or configurations\n      if ('undefined' === typeof value || null === value) return '';\n\n      return this._handleWhitespace(value);\n    },\n\n    // Actualize options that could have change since previous validation\n    // Re-bind accordingly constraints (could be some new, removed or updated)\n    refreshConstraints: function refreshConstraints() {\n      return this.actualizeOptions()._bindConstraints();\n    },\n\n    /**\r\n    * Add a new constraint to a field\r\n    *\r\n    * @param {String}   name\r\n    * @param {Mixed}    requirements      optional\r\n    * @param {Number}   priority          optional\r\n    * @param {Boolean}  isDomConstraint   optional\r\n    */\n    addConstraint: function addConstraint(name, requirements, priority, isDomConstraint) {\n\n      if (window.Parsley._validatorRegistry.validators[name]) {\n        var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\n\n        // if constraint already exist, delete it and push new version\n        if ('undefined' !== this.constraintsByName[constraint.name]) this.removeConstraint(constraint.name);\n\n        this.constraints.push(constraint);\n        this.constraintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n    },\n\n    // Remove a constraint\n    removeConstraint: function removeConstraint(name) {\n      for (var i = 0; i < this.constraints.length; i++) if (name === this.constraints[i].name) {\n        this.constraints.splice(i, 1);\n        break;\n      }\n      delete this.constraintsByName[name];\n      return this;\n    },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: function updateConstraint(name, parameters, priority) {\n      return this.removeConstraint(name).addConstraint(name, parameters, priority);\n    },\n\n    // # Internals\n\n    // Internal only.\n    // Bind constraints from config + options + DOM\n    _bindConstraints: function _bindConstraints() {\n      var constraints = [];\n      var constraintsByName = {};\n\n      // clean all existing DOM constraints to only keep javascript user constraints\n      for (var i = 0; i < this.constraints.length; i++) if (false === this.constraints[i].isDomConstraint) {\n        constraints.push(this.constraints[i]);\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\n      }\n\n      this.constraints = constraints;\n      this.constraintsByName = constraintsByName;\n\n      // then re-add Parsley DOM-API constraints\n      for (var name in this.options) this.addConstraint(name, this.options[name], undefined, true);\n\n      // finally, bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n    },\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTML5 compliant\n    _bindHtml5Constraints: function _bindHtml5Constraints() {\n      // html5 required\n      if (this.$element.hasClass('required') || this.$element.attr('required')) this.addConstraint('required', true, undefined, true);\n\n      // html5 pattern\n      if ('string' === typeof this.$element.attr('pattern')) this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\n\n      // range\n      if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max')) this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\n\n      // HTML5 min\n      else if ('undefined' !== typeof this.$element.attr('min')) this.addConstraint('min', this.$element.attr('min'), undefined, true);\n\n        // HTML5 max\n        else if ('undefined' !== typeof this.$element.attr('max')) this.addConstraint('max', this.$element.attr('max'), undefined, true);\n\n      // length\n      if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength')) this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\n\n      // HTML5 minlength\n      else if ('undefined' !== typeof this.$element.attr('minlength')) this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\n\n        // HTML5 maxlength\n        else if ('undefined' !== typeof this.$element.attr('maxlength')) this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\n\n      // html5 types\n      var type = this.$element.attr('type');\n\n      if ('undefined' === typeof type) return this;\n\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n      if ('number' === type) {\n        return this.addConstraint('type', ['number', {\n          step: this.$element.attr('step'),\n          base: this.$element.attr('min') || this.$element.attr('value')\n        }], undefined, true);\n        // Regular other HTML5 supported types\n      } else if (/^(email|url|range)$/i.test(type)) {\n          return this.addConstraint('type', type, undefined, true);\n        }\n      return this;\n    },\n\n    // Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function _isRequired() {\n      if ('undefined' === typeof this.constraintsByName.required) return false;\n\n      return false !== this.constraintsByName.required.requirements;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    _trigger: function _trigger(eventName) {\n      return this.trigger('field:' + eventName);\n    },\n\n    // Internal only\n    // Handles whitespace in a value\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n    _handleWhitespace: function _handleWhitespace(value) {\n      if (true === this.options.trimValue) ParsleyUtils__default.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n      if ('squish' === this.options.whitespace) value = value.replace(/\\s{2,}/g, ' ');\n\n      if ('trim' === this.options.whitespace || 'squish' === this.options.whitespace || true === this.options.trimValue) value = ParsleyUtils__default.trimString(value);\n\n      return value;\n    },\n\n    // Internal only.\n    // Returns the constraints, grouped by descending priority.\n    // The result is thus an array of arrays of constraints.\n    _getGroupedConstraints: function _getGroupedConstraints() {\n      if (false === this.options.priorityEnabled) return [this.constraints];\n\n      var groupedConstraints = [];\n      var index = {};\n\n      // Create array unique of priorities\n      for (var i = 0; i < this.constraints.length; i++) {\n        var p = this.constraints[i].priority;\n        if (!index[p]) groupedConstraints.push(index[p] = []);\n        index[p].push(this.constraints[i]);\n      }\n      // Sort them by priority DESC\n      groupedConstraints.sort(function (a, b) {\n        return b[0].priority - a[0].priority;\n      });\n\n      return groupedConstraints;\n    }\n\n  };\n\n  var parsley_field = ParsleyField;\n\n  var ParsleyMultiple = function ParsleyMultiple() {\n    this.__class__ = 'ParsleyFieldMultiple';\n  };\n\n  ParsleyMultiple.prototype = {\n    // Add new `$element` sibling for multiple field\n    addElement: function addElement($element) {\n      this.$elements.push($element);\n\n      return this;\n    },\n\n    // See `ParsleyField.refreshConstraints()`\n    refreshConstraints: function refreshConstraints() {\n      var fieldConstraints;\n\n      this.constraints = [];\n\n      // Select multiple special treatment\n      if (this.$element.is('select')) {\n        this.actualizeOptions()._bindConstraints();\n\n        return this;\n      }\n\n      // Gather all constraints for each input in the multiple group\n      for (var i = 0; i < this.$elements.length; i++) {\n\n        // Check if element have not been dynamically removed since last binding\n        if (!$('html').has(this.$elements[i]).length) {\n          this.$elements.splice(i, 1);\n          continue;\n        }\n\n        fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\n\n        for (var j = 0; j < fieldConstraints.length; j++) this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n      }\n\n      return this;\n    },\n\n    // See `ParsleyField.getValue()`\n    getValue: function getValue() {\n      // Value could be overriden in DOM\n      if ('function' === typeof this.options.value) return this.options.value(this);else if ('undefined' !== typeof this.options.value) return this.options.value;\n\n      // Radio input case\n      if (this.$element.is('input[type=radio]')) return this._findRelated().filter(':checked').val() || '';\n\n      // checkbox input case\n      if (this.$element.is('input[type=checkbox]')) {\n        var values = [];\n\n        this._findRelated().filter(':checked').each(function () {\n          values.push($(this).val());\n        });\n\n        return values;\n      }\n\n      // Select multiple case\n      if (this.$element.is('select') && null === this.$element.val()) return [];\n\n      // Default case that should never happen\n      return this.$element.val();\n    },\n\n    _init: function _init() {\n      this.$elements = [this.$element];\n\n      return this;\n    }\n  };\n\n  var ParsleyFactory = function ParsleyFactory(element, options, parsleyFormInstance) {\n    this.$element = $(element);\n\n    // If the element has already been bound, returns its saved Parsley instance\n    var savedparsleyFormInstance = this.$element.data('Parsley');\n    if (savedparsleyFormInstance) {\n\n      // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n        savedparsleyFormInstance.parent = parsleyFormInstance;\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n      }\n\n      if ('object' === typeof options) {\n        $.extend(savedparsleyFormInstance.options, options);\n      }\n\n      return savedparsleyFormInstance;\n    }\n\n    // Parsley must be instantiated with a DOM element or jQuery $element\n    if (!this.$element.length) throw new Error('You must bind Parsley on an existing element.');\n\n    if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__) throw new Error('Parent instance must be a ParsleyForm instance');\n\n    this.parent = parsleyFormInstance || window.Parsley;\n    return this.init(options);\n  };\n\n  ParsleyFactory.prototype = {\n    init: function init(options) {\n      this.__class__ = 'Parsley';\n      this.__version__ = '2.4.3';\n      this.__id__ = ParsleyUtils__default.generateID();\n\n      // Pre-compute options\n      this._resetOptions(options);\n\n      // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n      if (this.$element.is('form') || ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)) return this.bind('parsleyForm');\n\n      // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n    },\n\n    isMultiple: function isMultiple() {\n      return this.$element.is('input[type=radio], input[type=checkbox]') || this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple');\n    },\n\n    // Multiples fields are a real nightmare :(\n    // Maybe some refactoring would be appreciated here...\n    handleMultiple: function handleMultiple() {\n      var _this12 = this;\n\n      var name;\n      var multiple;\n      var parsleyMultipleInstance;\n\n      // Handle multiple name\n      if (this.options.multiple) ; // We already have our 'multiple' identifier\n      else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length) this.options.multiple = name = this.$element.attr('name');else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length) this.options.multiple = this.$element.attr('id');\n\n      // Special select multiple input\n      if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\n        this.options.multiple = this.options.multiple || this.__id__;\n        return this.bind('parsleyFieldMultiple');\n\n        // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n      } else if (!this.options.multiple) {\n          ParsleyUtils__default.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n          return this;\n        }\n\n      // Remove special chars\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n      if ('undefined' !== typeof name) {\n        $('input[name=\"' + name + '\"]').each(function (i, input) {\n          if ($(input).is('input[type=radio], input[type=checkbox]')) $(input).attr(_this12.options.namespace + 'multiple', _this12.options.multiple);\n        });\n      }\n\n      // Check here if we don't already have a related multiple instance saved\n      var $previouslyRelated = this._findRelated();\n      for (var i = 0; i < $previouslyRelated.length; i++) {\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n        if ('undefined' !== typeof parsleyMultipleInstance) {\n\n          if (!this.$element.data('ParsleyFieldMultiple')) {\n            parsleyMultipleInstance.addElement(this.$element);\n          }\n\n          break;\n        }\n      }\n\n      // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\n      // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\n      this.bind('parsleyField', true);\n\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n    },\n\n    // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\n    bind: function bind(type, doNotStore) {\n      var parsleyInstance;\n\n      switch (type) {\n        case 'parsleyForm':\n          parsleyInstance = $.extend(new ParsleyForm(this.$element, this.domOptions, this.options), new ParsleyAbstract(), window.ParsleyExtend)._bindFields();\n          break;\n        case 'parsleyField':\n          parsleyInstance = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), new ParsleyAbstract(), window.ParsleyExtend);\n          break;\n        case 'parsleyFieldMultiple':\n          parsleyInstance = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), new ParsleyMultiple(), new ParsleyAbstract(), window.ParsleyExtend)._init();\n          break;\n        default:\n          throw new Error(type + 'is not a supported Parsley type');\n      }\n\n      if (this.options.multiple) ParsleyUtils__default.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\n\n      if ('undefined' !== typeof doNotStore) {\n        this.$element.data('ParsleyFieldMultiple', parsleyInstance);\n\n        return parsleyInstance;\n      }\n\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n      this.$element.data('Parsley', parsleyInstance);\n\n      // Tell the world we have a new ParsleyForm or ParsleyField instance!\n      parsleyInstance._actualizeTriggers();\n      parsleyInstance._trigger('init');\n\n      return parsleyInstance;\n    }\n  };\n\n  var vernums = $.fn.jquery.split('.');\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n  }\n  if (!vernums.forEach) {\n    ParsleyUtils__default.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n  }\n  // Inherit `on`, `off` & `trigger` to Parsley:\n  var Parsley = $.extend(new ParsleyAbstract(), {\n    $element: $(document),\n    actualizeOptions: null,\n    _resetOptions: null,\n    Factory: ParsleyFactory,\n    version: '2.4.3'\n  });\n\n  // Supplement ParsleyField and Form with ParsleyAbstract\n  // This way, the constructors will have access to those methods\n  $.extend(parsley_field.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);\n  $.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);\n  // Inherit actualizeOptions and _resetOptions:\n  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\n\n  // ### jQuery API\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n  $.fn.parsley = $.fn.psly = function (options) {\n    if (this.length > 1) {\n      var instances = [];\n\n      this.each(function () {\n        instances.push($(this).parsley(options));\n      });\n\n      return instances;\n    }\n\n    // Return undefined if applied to non existing DOM element\n    if (!$(this).length) {\n      ParsleyUtils__default.warn('You must bind Parsley on an existing element.');\n\n      return;\n    }\n\n    return new ParsleyFactory(this, options);\n  };\n\n  // ### ParsleyField and ParsleyForm extension\n  // Ensure the extension is now defined if it wasn't previously\n  if ('undefined' === typeof window.ParsleyExtend) window.ParsleyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefault, and copy over any existing values\n  Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley = window.psly = Parsley;\n  window.ParsleyUtils = ParsleyUtils__default;\n\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\n  var registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\n  window.ParsleyValidator = {};\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\n    window.Parsley[method] = $.proxy(registry, method);\n    window.ParsleyValidator[method] = function () {\n      var _window$Parsley;\n\n      ParsleyUtils__default.warnOnce('Accessing the method \\'' + method + '\\' through ParsleyValidator is deprecated. Simply call \\'window.Parsley.' + method + '(...)\\'');\n      return (_window$Parsley = window.Parsley)[method].apply(_window$Parsley, arguments);\n    };\n  });\n\n  // ### ParsleyUI\n  // Deprecated global object\n  window.Parsley.UI = ParsleyUI;\n  window.ParsleyUI = {\n    removeError: function removeError(instance, name, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      ParsleyUtils__default.warnOnce('Accessing ParsleyUI is deprecated. Call \\'removeError\\' on the instance directly. Please comment in issue 1073 as to your need to call this method.');\n      return instance.removeError(name, { updateClass: updateClass });\n    },\n    getErrorsMessages: function getErrorsMessages(instance) {\n      ParsleyUtils__default.warnOnce('Accessing ParsleyUI is deprecated. Call \\'getErrorsMessages\\' on the instance directly.');\n      return instance.getErrorsMessages();\n    }\n  };\n  $.each('addError updateError'.split(' '), function (i, method) {\n    window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      ParsleyUtils__default.warnOnce('Accessing ParsleyUI is deprecated. Call \\'' + method + '\\' on the instance directly. Please comment in issue 1073 as to your need to call this method.');\n      return instance[method](name, { message: message, assert: assert, updateClass: updateClass });\n    };\n  });\n\n  // ### PARSLEY auto-binding\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\n  if (false !== window.ParsleyConfig.autoBind) {\n    $(function () {\n      // Works only on `data-parsley-validate`.\n      if ($('[data-parsley-validate]').length) $('[data-parsley-validate]').parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecated = function deprecated() {\n    ParsleyUtils__default.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n  };\n\n  // Returns an event handler that calls `fn` with the arguments it expects\n  function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn.parsleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(this);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.parsleyAdaptedCallback;\n  }\n\n  var eventPrefix = 'parsley:';\n  // Converts 'parsley:form:validate' into 'form:validate'\n  function eventName(name) {\n    if (name.lastIndexOf(eventPrefix, 0) === 0) return name.substr(eventPrefix.length);\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instead.\n  $.listen = function (name, callback) {\n    var context;\n    deprecated();\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n    if ('function' !== typeof callback) throw new Error('Wrong parameters');\n\n    window.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n  $.listenTo = function (instance, name, fn) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) throw new Error('Must give Parsley instance');\n\n    if ('string' !== typeof name || 'function' !== typeof fn) throw new Error('Wrong parameters');\n\n    instance.on(eventName(name), adapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn) {\n    deprecated();\n    if ('string' !== typeof name || 'function' !== typeof fn) throw new Error('Wrong arguments');\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n  };\n\n  $.unsubscribeTo = function (instance, name) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) throw new Error('Must give Parsley instance');\n    instance.off(eventName(name));\n  };\n\n  $.unsubscribeAll = function (name) {\n    deprecated();\n    window.Parsley.off(eventName(name));\n    $('form,input,textarea,select').each(function () {\n      var instance = $(this).data('Parsley');\n      if (instance) {\n        instance.off(eventName(name));\n      }\n    });\n  };\n\n  // $.emit is deprecated. Use jQuery events instead.\n  $.emit = function (name, instance) {\n    var _instance;\n\n    deprecated();\n    var instanceGiven = instance instanceof parsley_field || instance instanceof ParsleyForm;\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.unshift(eventName(name));\n    if (!instanceGiven) {\n      instance = window.Parsley;\n    }\n    (_instance = instance).trigger.apply(_instance, _toConsumableArray(args));\n  };\n\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\n    asyncValidators: {\n      'default': {\n        fn: function fn(xhr) {\n          // By default, only status 2xx are deemed successful.\n          // Note: we use status instead of state() because responses with status 200\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\n          // result in state() === 'rejected'.\n          return xhr.status >= 200 && xhr.status < 300;\n        },\n        url: false\n      },\n      reverse: {\n        fn: function fn(xhr) {\n          // If reverse option is set, a failing ajax request is considered successful\n          return xhr.status < 200 || xhr.status >= 300;\n        },\n        url: false\n      }\n    },\n\n    addAsyncValidator: function addAsyncValidator(name, fn, url, options) {\n      Parsley.asyncValidators[name] = {\n        fn: fn,\n        url: url || false,\n        options: options || {}\n      };\n\n      return this;\n    }\n\n  });\n\n  Parsley.addValidator('remote', {\n    requirementType: {\n      '': 'string',\n      'validator': 'string',\n      'reverse': 'boolean',\n      'options': 'object'\n    },\n\n    validateString: function validateString(value, url, options, instance) {\n      var data = {};\n      var ajaxOptions;\n      var csr;\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n      if ('undefined' === typeof Parsley.asyncValidators[validator]) throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n      url = Parsley.asyncValidators[validator].url || url;\n\n      // Fill current value\n      if (url.indexOf('{value}') > -1) {\n        url = url.replace('{value}', encodeURIComponent(value));\n      } else {\n        data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\n      }\n\n      // Merge options passed in from the function with the ones in the attribute\n      var remoteOptions = $.extend(true, options.options || {}, Parsley.asyncValidators[validator].options);\n\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n      ajaxOptions = $.extend(true, {}, {\n        url: url,\n        data: data,\n        type: 'GET'\n      }, remoteOptions);\n\n      // Generate store key based on ajax options\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n      csr = $.param(ajaxOptions);\n\n      // Initialise querry cache\n      if ('undefined' === typeof Parsley._remoteCache) Parsley._remoteCache = {};\n\n      // Try to retrieve stored xhr\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n      var handleXhr = function handleXhr() {\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n        if (!result) // Map falsy results to rejected promise\n          result = $.Deferred().reject();\n        return $.when(result);\n      };\n\n      return xhr.then(handleXhr, handleXhr);\n    },\n\n    priority: -1\n  });\n\n  Parsley.on('form:submit', function () {\n    Parsley._remoteCache = {};\n  });\n\n  window.ParsleyExtend.addAsyncValidator = function () {\n    ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n    return Parsley.addAsyncValidator.apply(Parsley, arguments);\n  };\n\n  // This is included with the Parsley library itself,\n  // thus there is no use in adding it to your project.\n  Parsley.addMessages('en', {\n    defaultMessage: \"This value seems to be invalid.\",\n    type: {\n      email: \"This value should be a valid email.\",\n      url: \"This value should be a valid url.\",\n      number: \"This value should be a valid number.\",\n      integer: \"This value should be a valid integer.\",\n      digits: \"This value should be digits.\",\n      alphanum: \"This value should be alphanumeric.\"\n    },\n    notblank: \"This value should not be blank.\",\n    required: \"This value is required.\",\n    pattern: \"This value seems to be invalid.\",\n    min: \"This value should be greater than or equal to %s.\",\n    max: \"This value should be lower than or equal to %s.\",\n    range: \"This value should be between %s and %s.\",\n    minlength: \"This value is too short. It should have %s characters or more.\",\n    maxlength: \"This value is too long. It should have %s characters or fewer.\",\n    length: \"This value length is invalid. It should be between %s and %s characters long.\",\n    mincheck: \"You must select at least %s choices.\",\n    maxcheck: \"You must select %s choices or fewer.\",\n    check: \"You must select between %s and %s choices.\",\n    equalto: \"This value should be the same.\"\n  });\n\n  Parsley.setLocale('en');\n\n  /**\r\n   * inputevent - Alleviate browser bugs for input events\r\n   * https://github.com/marcandre/inputevent\r\n   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\r\n   * @author Marc-Andre Lafortune <github@marc-andre.ca>\r\n   * @license MIT\r\n   */\n\n  function InputEvent() {\n    var _this13 = this;\n\n    var globals = window || global;\n\n    // Slightly odd way construct our object. This way methods are force bound.\n    // Used to test for duplicate library.\n    $.extend(this, {\n\n      // For browsers that do not support isTrusted, assumes event is native.\n      isNativeEvent: function isNativeEvent(evt) {\n        return evt.originalEvent && evt.originalEvent.isTrusted !== false;\n      },\n\n      fakeInputEvent: function fakeInputEvent(evt) {\n        if (_this13.isNativeEvent(evt)) {\n          $(evt.target).trigger('input');\n        }\n      },\n\n      misbehaves: function misbehaves(evt) {\n        if (_this13.isNativeEvent(evt)) {\n          _this13.behavesOk(evt);\n          $(document).on('change.inputevent', evt.data.selector, _this13.fakeInputEvent);\n          _this13.fakeInputEvent(evt);\n        }\n      },\n\n      behavesOk: function behavesOk(evt) {\n        if (_this13.isNativeEvent(evt)) {\n          $(document) // Simply unbinds the testing handler\n          .off('input.inputevent', evt.data.selector, _this13.behavesOk).off('change.inputevent', evt.data.selector, _this13.misbehaves);\n        }\n      },\n\n      // Bind the testing handlers\n      install: function install() {\n        if (globals.inputEventPatched) {\n          return;\n        }\n        globals.inputEventPatched = '0.0.3';\n        var _arr = ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]', 'input[type=\"file\"]'];\n        for (var _i = 0; _i < _arr.length; _i++) {\n          var selector = _arr[_i];\n          $(document).on('input.inputevent', selector, { selector: selector }, _this13.behavesOk).on('change.inputevent', selector, { selector: selector }, _this13.misbehaves);\n        }\n      },\n\n      uninstall: function uninstall() {\n        delete globals.inputEventPatched;\n        $(document).off('.inputevent');\n      }\n\n    });\n  };\n\n  var inputevent = new InputEvent();\n\n  inputevent.install();\n\n  var parsley = Parsley;\n\n  return parsley;\n});\n//# sourceMappingURL=parsley.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery'), require('qtip2')) :\n  typeof define === 'function' && define.amd ? define(['jquery', 'qtip2'], factory) :\n  global.parsley = factory(global.$, global.qtip)\n}(this, function ($, qtip) { 'use strict';\n\n  var globalID = 1;\r\n  var pastWarnings = {};\r\n\r\n  var ParsleyUtils__ParsleyUtils = {\r\n    // Parsley DOM-API\r\n    // returns object from dom attributes and values\r\n    attr: function ($element, namespace, obj) {\r\n      var i;\r\n      var attribute;\r\n      var attributes;\r\n      var regex = new RegExp('^' + namespace, 'i');\r\n\r\n      if ('undefined' === typeof obj)\r\n        obj = {};\r\n      else {\r\n        // Clear all own properties. This won't affect prototype's values\r\n        for (i in obj) {\r\n          if (obj.hasOwnProperty(i))\r\n            delete obj[i];\r\n        }\r\n      }\r\n\r\n      if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\r\n        return obj;\r\n\r\n      attributes = $element[0].attributes;\r\n      for (i = attributes.length; i--; ) {\r\n        attribute = attributes[i];\r\n\r\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\r\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\r\n        }\r\n      }\r\n\r\n      return obj;\r\n    },\r\n\r\n    checkAttr: function ($element, namespace, checkAttr) {\r\n      return $element.is('[' + namespace + checkAttr + ']');\r\n    },\r\n\r\n    setAttr: function ($element, namespace, attr, value) {\r\n      $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\r\n    },\r\n\r\n    generateID: function () {\r\n      return '' + globalID++;\r\n    },\r\n\r\n    /** Third party functions **/\r\n    // Zepto deserialize function\r\n    deserializeValue: function (value) {\r\n      var num;\r\n\r\n      try {\r\n        return value ?\r\n          value == \"true\" ||\r\n          (value == \"false\" ? false :\r\n          value == \"null\" ? null :\r\n          !isNaN(num = Number(value)) ? num :\r\n          /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\r\n          value)\r\n          : value;\r\n      } catch (e) { return value; }\r\n    },\r\n\r\n    // Zepto camelize function\r\n    camelize: function (str) {\r\n      return str.replace(/-+(.)?/g, function (match, chr) {\r\n        return chr ? chr.toUpperCase() : '';\r\n      });\r\n    },\r\n\r\n    // Zepto dasherize function\r\n    dasherize: function (str) {\r\n      return str.replace(/::/g, '/')\r\n        .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n        .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n        .replace(/_/g, '-')\r\n        .toLowerCase();\r\n    },\r\n\r\n    warn: function () {\r\n      if (window.console && 'function' === typeof window.console.warn)\r\n        window.console.warn(...arguments);\r\n    },\r\n\r\n    warnOnce: function(msg) {\r\n      if (!pastWarnings[msg]) {\r\n        pastWarnings[msg] = true;\r\n        this.warn(...arguments);\r\n      }\r\n    },\r\n\r\n    _resetWarnings: function () {\r\n      pastWarnings = {};\r\n    },\r\n\r\n    trimString: function(string) {\r\n      return string.replace(/^\\s+|\\s+$/g, '');\r\n    },\r\n\r\n    namespaceEvents: function(events, namespace) {\r\n      events = this.trimString(events || '').split(/\\s+/);\r\n      if (!events[0])\r\n        return '';\r\n      return $.map(events, evt => `${evt}.${namespace}`).join(' ');\r\n    },\r\n\r\n    difference: function(array, remove) {\r\n      // This is O(N^2), should be optimized\r\n      let result = [];\r\n      $.each(array, (_, elem) => {\r\n        if (remove.indexOf(elem) == -1)\r\n          result.push(elem);\r\n      });\r\n      return result;\r\n    },\r\n\r\n    // Alter-ego to native Promise.all, but for jQuery\r\n    all: function(promises) {\r\n      // jQuery treats $.when() and $.when(singlePromise) differently; let's avoid that and add spurious elements\r\n      return $.when(...promises, 42, 42);\r\n    },\r\n\r\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\r\n    objectCreate: Object.create || (function () {\r\n      var Object = function () {};\r\n      return function (prototype) {\r\n        if (arguments.length > 1) {\r\n          throw Error('Second argument not supported');\r\n        }\r\n        if (typeof prototype != 'object') {\r\n          throw TypeError('Argument must be an object');\r\n        }\r\n        Object.prototype = prototype;\r\n        var result = new Object();\r\n        Object.prototype = null;\r\n        return result;\r\n      };\r\n    })()\r\n  };\r\n\r\n  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;\n\n  // All these options could be overriden and specified directly in DOM using\n  // `data-parsley-` default DOM-API\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\n  var ParsleyDefaults = {\n    // ### General\n\n    // Default data-namespace for DOM API\n    namespace: 'data-parsley-',\n\n    // Supported inputs by default\n    inputs: 'input, textarea, select',\n\n    // Excluded inputs by default\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n    // Stop validating field on highest priority failing constraint\n    priorityEnabled: true,\n\n    // ### Field only\n\n    // identifier used to group together inputs (e.g. radio buttons...)\n    multiple: null,\n\n    // identifier (or array of identifiers) used to validate only a select group of inputs\n    group: null,\n\n    // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\n\n    // Key events threshold before validation\n    validationThreshold: 3,\n\n    // Focused field on form validation error. 'first'|'last'|'none'\n    focus: 'first',\n\n    // event(s) that will trigger validation before first failure. eg: `input`...\n    trigger: false,\n\n    // event(s) that will trigger validation after first failure.\n    triggerAfterFailure: 'input',\n\n    // Class that would be added on every failing validation Parsley field\n    errorClass: 'parsley-error',\n\n    // Same for success validation\n    successClass: 'parsley-success',\n\n    // Return the `$element` that will receive these above success or error classes\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    classHandler: function (ParsleyField) {},\n\n    // Return the `$element` where errors will be appended\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    errorsContainer: function (ParsleyField) {},\n\n    // ul elem that would receive errors' list\n    errorsWrapper: '<i class=\"parsley-errors-list\"></i>',\n\n    // li elem that would receive error message\n    errorTemplate: '<i></i>'\n  };\n\n  var ParsleyAbstract = function () {\r\n    this.__id__ = ParsleyUtils__default.generateID();\r\n  };\r\n\r\n  ParsleyAbstract.prototype = {\r\n    asyncSupport: true, // Deprecated\r\n\r\n    _pipeAccordingToValidationResult: function () {\r\n      var pipe = () => {\r\n        var r = $.Deferred();\r\n        if (true !== this.validationResult)\r\n          r.reject();\r\n        return r.resolve().promise();\r\n      };\r\n      return [pipe, pipe];\r\n    },\r\n\r\n    actualizeOptions: function () {\r\n      ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);\r\n      if (this.parent && this.parent.actualizeOptions)\r\n        this.parent.actualizeOptions();\r\n      return this;\r\n    },\r\n\r\n    _resetOptions: function (initOptions) {\r\n      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);\r\n      this.options = ParsleyUtils__default.objectCreate(this.domOptions);\r\n      // Shallow copy of ownProperties of initOptions:\r\n      for (var i in initOptions) {\r\n        if (initOptions.hasOwnProperty(i))\r\n          this.options[i] = initOptions[i];\r\n      }\r\n      this.actualizeOptions();\r\n    },\r\n\r\n    _listeners: null,\r\n\r\n    // Register a callback for the given event name\r\n    // Callback is called with context as the first argument and the `this`\r\n    // The context is the current parsley instance, or window.Parsley if global\r\n    // A return value of `false` will interrupt the calls\r\n    on: function (name, fn) {\r\n      this._listeners = this._listeners || {};\r\n      var queue = this._listeners[name] = this._listeners[name] || [];\r\n      queue.push(fn);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Deprecated. Use `on` instead\r\n    subscribe: function(name, fn) {\r\n      $.listenTo(this, name.toLowerCase(), fn);\r\n    },\r\n\r\n    // Unregister a callback (or all if none is given) for the given event name\r\n    off: function (name, fn) {\r\n      var queue = this._listeners && this._listeners[name];\r\n      if (queue) {\r\n        if (!fn) {\r\n          delete this._listeners[name];\r\n        } else {\r\n          for (var i = queue.length; i--; )\r\n            if (queue[i] === fn)\r\n              queue.splice(i, 1);\r\n        }\r\n      }\r\n      return this;\r\n    },\r\n\r\n    // Deprecated. Use `off`\r\n    unsubscribe: function(name, fn) {\r\n      $.unsubscribeTo(this, name.toLowerCase());\r\n    },\r\n\r\n    // Trigger an event of the given name\r\n    // A return value of `false` interrupts the callback chain\r\n    // Returns false if execution was interrupted\r\n    trigger: function (name, target, extraArg) {\r\n      target = target || this;\r\n      var queue = this._listeners && this._listeners[name];\r\n      var result;\r\n      var parentResult;\r\n      if (queue) {\r\n        for (var i = queue.length; i--; ) {\r\n          result = queue[i].call(target, target, extraArg);\r\n          if (result === false) return result;\r\n        }\r\n      }\r\n      if (this.parent) {\r\n        return this.parent.trigger(name, target, extraArg);\r\n      }\r\n      return true;\r\n    },\r\n\r\n    // Reset UI\r\n    reset: function () {\r\n      // Field case: just emit a reset event for UI\r\n      if ('ParsleyForm' !== this.__class__) {\r\n        this._resetUI();\r\n        return this._trigger('reset');\r\n      }\r\n\r\n      // Form case: emit a reset event for each field\r\n      for (var i = 0; i < this.fields.length; i++)\r\n        this.fields[i].reset();\r\n\r\n      this._trigger('reset');\r\n    },\r\n\r\n    // Destroy Parsley instance (+ UI)\r\n    destroy: function () {\r\n      // Field case: emit destroy event to clean UI and then destroy stored instance\r\n      this._destroyUI();\r\n      if ('ParsleyForm' !== this.__class__) {\r\n        this.$element.removeData('Parsley');\r\n        this.$element.removeData('ParsleyFieldMultiple');\r\n        this._trigger('destroy');\r\n\r\n        return;\r\n      }\r\n\r\n      // Form case: destroy all its fields and then destroy stored instance\r\n      for (var i = 0; i < this.fields.length; i++)\r\n        this.fields[i].destroy();\r\n\r\n      this.$element.removeData('Parsley');\r\n      this._trigger('destroy');\r\n    },\r\n\r\n    asyncIsValid: function (group, force) {\r\n      ParsleyUtils__default.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\r\n      return this.whenValid({group, force});\r\n    },\r\n\r\n    _findRelated: function () {\r\n      return this.options.multiple ?\r\n        this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\r\n      : this.$element;\r\n    }\r\n  };\n\n  var requirementConverters = {\r\n    string: function(string) {\r\n      return string;\r\n    },\r\n    integer: function(string) {\r\n      if (isNaN(string))\r\n        throw 'Requirement is not an integer: \"' + string + '\"';\r\n      return parseInt(string, 10);\r\n    },\r\n    number: function(string) {\r\n      if (isNaN(string))\r\n        throw 'Requirement is not a number: \"' + string + '\"';\r\n      return parseFloat(string);\r\n    },\r\n    reference: function(string) { // Unused for now\r\n      var result = $(string);\r\n      if (result.length === 0)\r\n        throw 'No such reference: \"' + string + '\"';\r\n      return result;\r\n    },\r\n    boolean: function(string) {\r\n      return string !== 'false';\r\n    },\r\n    object: function(string) {\r\n      return ParsleyUtils__default.deserializeValue(string);\r\n    },\r\n    regexp: function(regexp) {\r\n      var flags = '';\r\n\r\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\r\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\r\n        // Replace the regexp literal string with the first match group: ([gimy]*)\r\n        // If no flag is present, this will be a blank string\r\n        flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\r\n        // Again, replace the regexp literal string with the first match group:\r\n        // everything excluding the opening and closing slashes and the flags\r\n        regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\r\n      } else {\r\n        // Anchor regexp:\r\n        regexp = '^' + regexp + '$';\r\n      }\r\n      return new RegExp(regexp, flags);\r\n    }\r\n  };\r\n\r\n  var convertArrayRequirement = function(string, length) {\r\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\r\n    if (!m)\r\n      throw 'Requirement is not an array: \"' + string + '\"';\r\n    var values = m[1].split(',').map(ParsleyUtils__default.trimString);\r\n    if (values.length !== length)\r\n      throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\r\n    return values;\r\n  };\r\n\r\n  var convertRequirement = function(requirementType, string) {\r\n    var converter = requirementConverters[requirementType || 'string'];\r\n    if (!converter)\r\n      throw 'Unknown requirement specification: \"' + requirementType + '\"';\r\n    return converter(string);\r\n  };\r\n\r\n  var convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\r\n    var main = null;\r\n    var extra = {};\r\n    for (var key in requirementSpec) {\r\n      if (key) {\r\n        var value = extraOptionReader(key);\r\n        if ('string' === typeof value)\r\n          value = convertRequirement(requirementSpec[key], value);\r\n        extra[key] = value;\r\n      } else {\r\n        main = convertRequirement(requirementSpec[key], string);\r\n      }\r\n    }\r\n    return [main, extra];\r\n  };\r\n\r\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\r\n\r\n  var ParsleyValidator = function(spec) {\r\n    $.extend(true, this, spec);\r\n  };\r\n\r\n  ParsleyValidator.prototype = {\r\n    // Returns `true` iff the given `value` is valid according the given requirements.\r\n    validate: function(value, requirementFirstArg) {\r\n      if (this.fn) { // Legacy style validator\r\n\r\n        if (arguments.length > 3)  // If more args then value, requirement, instance...\r\n          requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\r\n        return this.fn.call(this, value, requirementFirstArg);\r\n      }\r\n\r\n      if ($.isArray(value)) {\r\n        if (!this.validateMultiple)\r\n          throw 'Validator `' + this.name + '` does not handle multiple values';\r\n        return this.validateMultiple(...arguments);\r\n      } else {\r\n        if (this.validateNumber) {\r\n          if (isNaN(value))\r\n            return false;\r\n          arguments[0] = parseFloat(arguments[0]);\r\n          return this.validateNumber(...arguments);\r\n        }\r\n        if (this.validateString) {\r\n          return this.validateString(...arguments);\r\n        }\r\n        throw 'Validator `' + this.name + '` only handles multiple values';\r\n      }\r\n    },\r\n\r\n    // Parses `requirements` into an array of arguments,\r\n    // according to `this.requirementType`\r\n    parseRequirements: function(requirements, extraOptionReader) {\r\n      if ('string' !== typeof requirements) {\r\n        // Assume requirement already parsed\r\n        // but make sure we return an array\r\n        return $.isArray(requirements) ? requirements : [requirements];\r\n      }\r\n      var type = this.requirementType;\r\n      if ($.isArray(type)) {\r\n        var values = convertArrayRequirement(requirements, type.length);\r\n        for (var i = 0; i < values.length; i++)\r\n          values[i] = convertRequirement(type[i], values[i]);\r\n        return values;\r\n      } else if ($.isPlainObject(type)) {\r\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\r\n      } else {\r\n        return [convertRequirement(type, requirements)];\r\n      }\r\n    },\r\n    // Defaults:\r\n    requirementType: 'string',\r\n\r\n    priority: 2\r\n\r\n  };\n\n  var ParsleyValidatorRegistry = function (validators, catalog) {\r\n    this.__class__ = 'ParsleyValidatorRegistry';\r\n\r\n    // Default Parsley locale is en\r\n    this.locale = 'en';\r\n\r\n    this.init(validators || {}, catalog || {});\r\n  };\r\n\r\n  var typeRegexes =  {\r\n    email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\r\n\r\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\r\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\r\n\r\n    integer: /^-?\\d+$/,\r\n\r\n    digits: /^\\d+$/,\r\n\r\n    alphanum: /^\\w+$/i,\r\n\r\n    url: new RegExp(\r\n        \"^\" +\r\n          // protocol identifier\r\n          \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\r\n          // user:pass authentication\r\n          \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n          \"(?:\" +\r\n            // IP address exclusion\r\n            // private & local networks\r\n            // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\r\n            // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n            // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n            // IP address dotted notation octets\r\n            // excludes loopback network 0.0.0.0\r\n            // excludes reserved space >= 224.0.0.0\r\n            // excludes network & broacast addresses\r\n            // (first & last IP address of each class)\r\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n          \"|\" +\r\n            // host name\r\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n            // domain name\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n            // TLD identifier\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n          \")\" +\r\n          // port number\r\n          \"(?::\\\\d{2,5})?\" +\r\n          // resource path\r\n          \"(?:/\\\\S*)?\" +\r\n        \"$\", 'i'\r\n      )\r\n  };\r\n  typeRegexes.range = typeRegexes.number;\r\n\r\n  // See http://stackoverflow.com/a/10454560/8279\r\n  var decimalPlaces = num => {\r\n    var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n    if (!match) { return 0; }\r\n    return Math.max(\r\n         0,\r\n         // Number of digits right of decimal point.\r\n         (match[1] ? match[1].length : 0) -\r\n         // Adjust for scientific notation.\r\n         (match[2] ? +match[2] : 0));\r\n  };\r\n\r\n  ParsleyValidatorRegistry.prototype = {\r\n    init: function (validators, catalog) {\r\n      this.catalog = catalog;\r\n      // Copy prototype's validators:\r\n      this.validators = $.extend({}, this.validators);\r\n\r\n      for (var name in validators)\r\n        this.addValidator(name, validators[name].fn, validators[name].priority);\r\n\r\n      window.Parsley.trigger('parsley:validator:init');\r\n    },\r\n\r\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\r\n    setLocale: function (locale) {\r\n      if ('undefined' === typeof this.catalog[locale])\r\n        throw new Error(locale + ' is not available in the catalog');\r\n\r\n      this.locale = locale;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\r\n    addCatalog: function (locale, messages, set) {\r\n      if ('object' === typeof messages)\r\n        this.catalog[locale] = messages;\r\n\r\n      if (true === set)\r\n        return this.setLocale(locale);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a specific message for a given constraint in a given locale\r\n    addMessage: function (locale, name, message) {\r\n      if ('undefined' === typeof this.catalog[locale])\r\n        this.catalog[locale] = {};\r\n\r\n      this.catalog[locale][name] = message;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add messages for a given locale\r\n    addMessages: function (locale, nameMessageObject) {\r\n      for (var name in nameMessageObject)\r\n        this.addMessage(locale, name, nameMessageObject[name]);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a new validator\r\n    //\r\n    //    addValidator('custom', {\r\n    //        requirementType: ['integer', 'integer'],\r\n    //        validateString: function(value, from, to) {},\r\n    //        priority: 22,\r\n    //        messages: {\r\n    //          en: \"Hey, that's no good\",\r\n    //          fr: \"Aye aye, pas bon du tout\",\r\n    //        }\r\n    //    })\r\n    //\r\n    // Old API was addValidator(name, function, priority)\r\n    //\r\n    addValidator: function (name, arg1, arg2) {\r\n      if (this.validators[name])\r\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is already defined.');\r\n      else if (ParsleyDefaults.hasOwnProperty(name)) {\r\n        ParsleyUtils__default.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\r\n        return;\r\n      }\r\n      return this._setValidator(...arguments);\r\n    },\r\n\r\n    updateValidator: function (name, arg1, arg2) {\r\n      if (!this.validators[name]) {\r\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not already defined.');\r\n        return this.addValidator(...arguments);\r\n      }\r\n      return this._setValidator(...arguments);\r\n    },\r\n\r\n    removeValidator: function (name) {\r\n      if (!this.validators[name])\r\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not defined.');\r\n\r\n      delete this.validators[name];\r\n\r\n      return this;\r\n    },\r\n\r\n    _setValidator: function (name, validator, priority) {\r\n      if ('object' !== typeof validator) {\r\n        // Old style validator, with `fn` and `priority`\r\n        validator = {\r\n          fn: validator,\r\n          priority: priority\r\n        };\r\n      }\r\n      if (!validator.validate) {\r\n        validator = new ParsleyValidator(validator);\r\n      }\r\n      this.validators[name] = validator;\r\n\r\n      for (var locale in validator.messages || {})\r\n        this.addMessage(locale, name, validator.messages[locale]);\r\n\r\n      return this;\r\n    },\r\n\r\n    getErrorMessage: function (constraint) {\r\n      var message;\r\n\r\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\r\n      if ('type' === constraint.name) {\r\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\r\n        message = typeMessages[constraint.requirements];\r\n      } else\r\n        message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\r\n\r\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\r\n    },\r\n\r\n    // Kind of light `sprintf()` implementation\r\n    formatMessage: function (string, parameters) {\r\n      if ('object' === typeof parameters) {\r\n        for (var i in parameters)\r\n          string = this.formatMessage(string, parameters[i]);\r\n\r\n        return string;\r\n      }\r\n\r\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\r\n    },\r\n\r\n    // Here is the Parsley default validators list.\r\n    // A validator is an object with the following key values:\r\n    //  - priority: an integer\r\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\r\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\r\n    // Alternatively, a validator can be a function that returns such an object\r\n    //\r\n    validators: {\r\n      notblank: {\r\n        validateString: function(value) {\r\n          return /\\S/.test(value);\r\n        },\r\n        priority: 2\r\n      },\r\n      required: {\r\n        validateMultiple: function(values) {\r\n          return values.length > 0;\r\n        },\r\n        validateString: function(value) {\r\n          return /\\S/.test(value);\r\n        },\r\n        priority: 512\r\n      },\r\n      type: {\r\n        validateString: function(value, type, {step = '1', base = 0} = {}) {\r\n          var regex = typeRegexes[type];\r\n          if (!regex) {\r\n            throw new Error('validator type `' + type + '` is not supported');\r\n          }\r\n          if (!regex.test(value))\r\n            return false;\r\n          if ('number' === type) {\r\n            if (!/^any$/i.test(step || '')) {\r\n              var nb = Number(value);\r\n              var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\r\n              if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\r\n                return false;\r\n              // Be careful of rounding errors by using integers.\r\n              var toInt = f => Math.round(f * Math.pow(10, decimals));\r\n              if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\r\n                return false;\r\n            }\r\n          }\r\n          return true;\r\n        },\r\n        requirementType: {\r\n          '': 'string',\r\n          step: 'string',\r\n          base: 'number'\r\n        },\r\n        priority: 256\r\n      },\r\n      pattern: {\r\n        validateString: function(value, regexp) {\r\n          return regexp.test(value);\r\n        },\r\n        requirementType: 'regexp',\r\n        priority: 64\r\n      },\r\n      minlength: {\r\n        validateString: function (value, requirement) {\r\n          return value.length >= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      maxlength: {\r\n        validateString: function (value, requirement) {\r\n          return value.length <= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      length: {\r\n        validateString: function (value, min, max) {\r\n          return value.length >= min && value.length <= max;\r\n        },\r\n        requirementType: ['integer', 'integer'],\r\n        priority: 30\r\n      },\r\n      mincheck: {\r\n        validateMultiple: function (values, requirement) {\r\n          return values.length >= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      maxcheck: {\r\n        validateMultiple: function (values, requirement) {\r\n          return values.length <= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      check: {\r\n        validateMultiple: function (values, min, max) {\r\n          return values.length >= min && values.length <= max;\r\n        },\r\n        requirementType: ['integer', 'integer'],\r\n        priority: 30\r\n      },\r\n      min: {\r\n        validateNumber: function (value, requirement) {\r\n          return value >= requirement;\r\n        },\r\n        requirementType: 'number',\r\n        priority: 30\r\n      },\r\n      max: {\r\n        validateNumber: function (value, requirement) {\r\n          return value <= requirement;\r\n        },\r\n        requirementType: 'number',\r\n        priority: 30\r\n      },\r\n      range: {\r\n        validateNumber: function (value, min, max) {\r\n          return value >= min && value <= max;\r\n        },\r\n        requirementType: ['number', 'number'],\r\n        priority: 30\r\n      },\r\n      equalto: {\r\n        validateString: function (value, refOrValue) {\r\n          var $reference = $(refOrValue);\r\n          if ($reference.length)\r\n            return value === $reference.val();\r\n          else\r\n            return value === refOrValue;\r\n        },\r\n        priority: 256\r\n      }\r\n    }\r\n  };\n\n  var ParsleyUI = {};\n\n  /*custom*/\n  var qtipSetting = {\n      show : {\n          solo : true,\n          hide : 'unfocus'\n      },\n      position : {\n          my : 'left center',\n          at : 'right center'\n      }\n  };\n\n  var diffResults = function (newResult, oldResult, deep) {\n    var added = [];\n    var kept = [];\n\n    for (var i = 0; i < newResult.length; i++) {\n      var found = false;\n\n      for (var j = 0; j < oldResult.length; j++)\n        if (newResult[i].assert.name === oldResult[j].assert.name) {\n          found = true;\n          break;\n        }\n\n      if (found)\n        kept.push(newResult[i]);\n      else\n        added.push(newResult[i]);\n    }\n\n    return {\n      kept: kept,\n      added: added,\n      removed: !deep ? diffResults(oldResult, newResult, true).added : []\n    };\n  };\n\n  ParsleyUI.Form = {\n\n    _actualizeTriggers: function () {\n      this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\n      this.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', evt => { this.onSubmitButton(evt); });\n\n      // UI could be disabled\n      if (false === this.options.uiEnabled)\n        return;\n\n      this.$element.attr('novalidate', '');\n    },\n\n    focus: function () {\n      this._focusedField = null;\n\n      if (true === this.validationResult || 'none' === this.options.focus)\n        return null;\n\n      for (var i = 0; i < this.fields.length; i++) {\n        var field = this.fields[i];\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n          this._focusedField = field.$element;\n          if ('first' === this.options.focus)\n            break;\n        }\n      }\n\n      if (null === this._focusedField)\n        return null;\n\n      return this._focusedField.focus();\n    },\n\n    _destroyUI: function () {\n      // Reset all event listeners\n      this.$element.off('.Parsley');\n    }\n\n  };\n\n  ParsleyUI.Field = {\n\n    _reflowUI: function () {\n      this._buildUI();\n\n      // If this field doesn't have an active UI don't bother doing something\n      if (!this._ui)\n        return;\n\n      // Diff between two validation results\n      var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n      // Then store current validation result for next reflow\n      this._ui.lastValidationResult = this.validationResult;\n\n      // Handle valid / invalid / none field class\n      this._manageStatusClass();\n\n      // Add, remove, updated errors messages\n      this._manageErrorsMessages(diff);\n\n      // Triggers impl\n      this._actualizeTriggers();\n\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n      if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\n        this._failedOnce = true;\n        this._actualizeTriggers();\n      }\n    },\n\n    // Returns an array of field's error message(s)\n    getErrorsMessages: function () {\n      // No error message, field is valid\n      if (true === this.validationResult)\n        return [];\n\n      var messages = [];\n\n      for (var i = 0; i < this.validationResult.length; i++)\n        messages.push(this.validationResult[i].errorMessage ||\n         this._getErrorMessage(this.validationResult[i].assert));\n\n      return messages;\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    addError: function (name, {message, assert, updateClass = true} = {}) {\n      this._buildUI();\n      this._addError(name, {message, assert});\n\n      if (updateClass)\n        this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    updateError: function (name, {message, assert, updateClass = true} = {}) {\n      this._buildUI();\n      this._updateError(name, {message, assert});\n\n      if (updateClass)\n        this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    removeError: function (name, {updateClass = true} = {}) {\n      this._buildUI();\n      this._removeError(name);\n\n      // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n      if (updateClass)\n        this._manageStatusClass();\n    },\n\n    _manageStatusClass: function () {\n      if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\n        this._successClass();\n      else if (this.validationResult.length > 0)\n        this._errorClass();\n      else\n        this._resetClass();\n    },\n\n    _manageErrorsMessages: function (diff) {\n      if ('undefined' !== typeof this.options.errorsMessagesDisabled)\n        return;\n\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n      if ('undefined' !== typeof this.options.errorMessage) {\n        if ((diff.added.length || diff.kept.length)) {\n          this._insertErrorWrapper();\n\n          if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n            // this._ui.$errorsWrapper\n            //   .append(\n            //     $(this.options.errorTemplate)\n            //     .addClass('parsley-custom-error-message')\n            //   );\n            this.$element\n              .attr('title', this.options.errorMessage)\n              .qtip(qtipSetting);\n\n          return this._ui.$errorsWrapper\n            .addClass('filled')\n            .find('.parsley-custom-error-message')\n            .html(this.options.errorMessage);\n        }\n\n        // remove title\n        var qtapi = this.$element.qtip('api');\n        if (qtapi) {\n          qtapi.destroy().removeAttr('title');\n        }\n\n        return this._ui.$errorsWrapper\n          .removeClass('filled')\n          .find('.parsley-custom-error-message')\n          .remove();\n      }\n\n      // Show, hide, update failing constraints messages\n      for (var i = 0; i < diff.removed.length; i++)\n        this._removeError(diff.removed[i].assert.name);\n\n      for (i = 0; i < diff.added.length; i++)\n        this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\n\n      for (i = 0; i < diff.kept.length; i++)\n        this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\n    },\n\n\n    _addError: function (name, {message, assert}) {\n      this._insertErrorWrapper();\n      // this._ui.$errorsWrapper\n      //   .addClass('filled')\n      //   .append(\n      //     $(this.options.errorTemplate)\n      //     .addClass('parsley-' + name)\n      //     .html(message || this._getErrorMessage(assert))\n      //   );\n       // use qtip instead of errorTemplate\n      this.$element\n        .attr('title', (message || this._getErrorMessage(assert)))\n        .qtip(qtipSetting);\n    },\n\n    _updateError: function (name, {message, assert}) {\n      this._ui.$errorsWrapper\n        .addClass('filled')\n        .find('.parsley-' + name)\n        .html(message || this._getErrorMessage(assert));\n    },\n\n    _removeError: function (name) {\n      this._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-' + name)\n        .remove();\n\n      // remove title\n        var qtapi = this.$element.qtip('api');\n        if (qtapi) {\n          qtapi.destroy().removeAttr('title');\n        }\n    },\n\n    _getErrorMessage: function (constraint) {\n      var customConstraintErrorMessage = constraint.name + 'Message';\n\n      if ('undefined' !== typeof this.options[customConstraintErrorMessage])\n        return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n      return window.Parsley.getErrorMessage(constraint);\n    },\n\n    _buildUI: function () {\n      // UI could be already built or disabled\n      if (this._ui || false === this.options.uiEnabled)\n        return;\n\n      var _ui = {};\n\n      // Give field its Parsley id in DOM\n      this.$element.attr(this.options.namespace + 'id', this.__id__);\n\n      /** Generate important UI elements and store them in this **/\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n      _ui.$errorClassHandler = this._manageClassHandler();\n\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n      _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\n      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n      _ui.lastValidationResult = [];\n      _ui.validationInformationVisible = false;\n\n      // Store it in this for later\n      this._ui = _ui;\n    },\n\n    // Determine which element will have `parsley-error` and `parsley-success` classes\n    _manageClassHandler: function () {\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n      if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\n        return $(this.options.classHandler);\n\n      // Class handled could also be determined by function given in Parsley options\n      var $handler = this.options.classHandler.call(this, this);\n\n      // If this function returned a valid existing DOM element, go for it\n      if ('undefined' !== typeof $handler && $handler.length)\n        return $handler;\n\n      // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\n      if (!this.options.multiple || this.$element.is('select'))\n        return this.$element;\n\n      // But if multiple element (radio, checkbox), that would be their parent\n      return this.$element.parent();\n    },\n\n    _insertErrorWrapper: function () {\n      var $errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== this._ui.$errorsWrapper.parent().length)\n        return this._ui.$errorsWrapper.parent();\n\n      if ('string' === typeof this.options.errorsContainer) {\n        if ($(this.options.errorsContainer).length)\n          return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);\n        else\n          ParsleyUtils__default.warn('The errors container `' + this.options.errorsContainer + '` does not exist in DOM');\n      } else if ('function' === typeof this.options.errorsContainer)\n        $errorsContainer = this.options.errorsContainer.call(this, this);\n\n      if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\n        return $errorsContainer.append(this._ui.$errorsWrapper);\n\n      var $from = this.$element;\n      if (this.options.multiple)\n        $from = $from.parent();\n      return $from.after(this._ui.$errorsWrapper);\n    },\n\n    _actualizeTriggers: function () {\n      var $toBind = this._findRelated();\n      var trigger;\n\n      // Remove Parsley events already bound on this field\n      $toBind.off('.Parsley');\n      if (this._failedOnce)\n        $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\n          this.validate();\n        });\n      else if (trigger = ParsleyUtils__default.namespaceEvents(this.options.trigger, 'Parsley')) {\n        $toBind.on(trigger, event => {\n          this._eventValidate(event);\n        });\n      }\n    },\n\n    _eventValidate: function (event) {\n      // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n      if (/key|input/.test(event.type))\n        if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\n          return;\n\n      this.validate();\n    },\n\n    _resetUI: function () {\n      // Reset all event listeners\n      this._failedOnce = false;\n      this._actualizeTriggers();\n\n      // Nothing to do if UI never initialized for this field\n      if ('undefined' === typeof this._ui)\n        return;\n\n      // Reset all errors' li\n      this._ui.$errorsWrapper\n        .removeClass('filled')\n        .children()\n        .remove();\n\n      // Reset validation class\n      this._resetClass();\n\n      // Reset validation flags and last validation result\n      this._ui.lastValidationResult = [];\n      this._ui.validationInformationVisible = false;\n    },\n\n    _destroyUI: function () {\n      this._resetUI();\n\n      if ('undefined' !== typeof this._ui)\n        this._ui.$errorsWrapper.remove();\n\n      delete this._ui;\n    },\n\n    _successClass: function () {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n    },\n    _errorClass: function () {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n    },\n    _resetClass: function () {\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n    }\n  };\n\n  var ParsleyForm = function (element, domOptions, options) {\r\n    this.__class__ = 'ParsleyForm';\r\n\r\n    this.$element = $(element);\r\n    this.domOptions = domOptions;\r\n    this.options = options;\r\n    this.parent = window.Parsley;\r\n\r\n    this.fields = [];\r\n    this.validationResult = null;\r\n  };\r\n\r\n  var ParsleyForm__statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\n  ParsleyForm.prototype = {\r\n    onSubmitValidate: function (event) {\r\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\r\n      if (true === event.parsley)\r\n        return;\r\n\r\n      // If we didn't come here through a submit button, use the first one in the form\r\n      var $submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\r\n      this._$submitSource = null;\r\n      this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\r\n      if ($submitSource.is('[formnovalidate]'))\r\n        return;\r\n\r\n      var promise = this.whenValidate({event});\r\n\r\n      if ('resolved' === promise.state() && false !== this._trigger('submit')) {\r\n        // All good, let event go through. We make this distinction because browsers\r\n        // differ in their handling of `submit` being called from inside a submit event [#1047]\r\n      } else {\r\n        // Rejected or pending: cancel this submit\r\n        event.stopImmediatePropagation();\r\n        event.preventDefault();\r\n        if ('pending' === promise.state())\r\n          promise.done(() => { this._submit($submitSource); });\r\n      }\r\n    },\r\n\r\n    onSubmitButton: function(event) {\r\n      this._$submitSource = $(event.currentTarget);\r\n    },\r\n    // internal\r\n    // _submit submits the form, this time without going through the validations.\r\n    // Care must be taken to \"fake\" the actual submit button being clicked.\r\n    _submit: function ($submitSource) {\r\n      if (false === this._trigger('submit'))\r\n        return;\r\n      // Add submit button's data\r\n      if ($submitSource) {\r\n        var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\r\n        if (0 === $synthetic.length)\r\n          $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\r\n        $synthetic.attr({\r\n          name: $submitSource.attr('name'),\r\n          value: $submitSource.attr('value')\r\n        });\r\n      }\r\n\r\n      this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\r\n    },\r\n\r\n    // Performs validation on fields while triggering events.\r\n    // @returns `true` if all validations succeeds, `false`\r\n    // if a failure is immediately detected, or `null`\r\n    // if dependant on a promise.\r\n    // Consider using `whenValidate` instead.\r\n    validate: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\r\n        var [group, force, event] = arguments;\r\n        options = {group, force, event};\r\n      }\r\n      return ParsleyForm__statusMapping[ this.whenValidate(options).state() ];\r\n    },\r\n\r\n    whenValidate: function ({group, force, event} = {}) {\r\n      this.submitEvent = event;\r\n      if (event) {\r\n        this.submitEvent = $.extend({}, event, {preventDefault: () => {\r\n          ParsleyUtils__default.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\r\n          this.validationResult = false;\r\n        }});\r\n      }\r\n      this.validationResult = true;\r\n\r\n      // fire validate event to eventually modify things before every validation\r\n      this._trigger('validate');\r\n\r\n      // Refresh form DOM options and form's fields that could have changed\r\n      this._refreshFields();\r\n\r\n      var promises = this._withoutReactualizingFormOptions(() => {\r\n        return $.map(this.fields, field => field.whenValidate({force, group}));\r\n      });\r\n\r\n      return ParsleyUtils__default.all(promises)\r\n        .done(  () => { this._trigger('success'); })\r\n        .fail(  () => {\r\n          this.validationResult = false;\r\n          this.focus();\r\n          this._trigger('error');\r\n        })\r\n        .always(() => { this._trigger('validated'); })\r\n        .pipe(...this._pipeAccordingToValidationResult());\r\n    },\r\n\r\n    // Iterate over refreshed fields, and stop on first failure.\r\n    // Returns `true` if all fields are valid, `false` if a failure is detected\r\n    // or `null` if the result depends on an unresolved promise.\r\n    // Prefer using `whenValid` instead.\r\n    isValid: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\r\n        var [group, force] = arguments;\r\n        options = {group, force};\r\n      }\r\n      return ParsleyForm__statusMapping[ this.whenValid(options).state() ];\r\n    },\r\n\r\n    // Iterate over refreshed fields and validate them.\r\n    // Returns a promise.\r\n    // A validation that immediately fails will interrupt the validations.\r\n    whenValid: function ({group, force} = {}) {\r\n      this._refreshFields();\r\n\r\n      var promises = this._withoutReactualizingFormOptions(() => {\r\n        return $.map(this.fields, field => field.whenValid({group, force}));\r\n      });\r\n      return ParsleyUtils__default.all(promises);\r\n    },\r\n\r\n    _refreshFields: function () {\r\n      return this.actualizeOptions()._bindFields();\r\n    },\r\n\r\n    _bindFields: function () {\r\n      var oldFields = this.fields;\r\n\r\n      this.fields = [];\r\n      this.fieldsMappedById = {};\r\n\r\n      this._withoutReactualizingFormOptions(() => {\r\n        this.$element\r\n        .find(this.options.inputs)\r\n        .not(this.options.excluded)\r\n        .each((_, element) => {\r\n          var fieldInstance = new window.Parsley.Factory(element, {}, this);\r\n\r\n          // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\r\n          if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\r\n            if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\r\n              this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\r\n              this.fields.push(fieldInstance);\r\n            }\r\n        });\r\n\r\n        $.each(ParsleyUtils__default.difference(oldFields, this.fields), (_, field) => {\r\n          field._trigger('reset');\r\n        });\r\n      });\r\n      return this;\r\n    },\r\n\r\n    // Internal only.\r\n    // Looping on a form's fields to do validation or similar\r\n    // will trigger reactualizing options on all of them, which\r\n    // in turn will reactualize the form's options.\r\n    // To avoid calling actualizeOptions so many times on the form\r\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\r\n    // the method actualizeOptions on this form while `fn` is called.\r\n    _withoutReactualizingFormOptions: function (fn) {\r\n      var oldActualizeOptions = this.actualizeOptions;\r\n      this.actualizeOptions = function () { return this; };\r\n      var result = fn();\r\n      this.actualizeOptions = oldActualizeOptions;\r\n      return result;\r\n    },\r\n\r\n    // Internal only.\r\n    // Shortcut to trigger an event\r\n    // Returns true iff event is not interrupted and default not prevented.\r\n    _trigger: function (eventName) {\r\n      return this.trigger('form:' + eventName);\r\n    }\r\n\r\n  };\n\n  var ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\r\n    if (!/ParsleyField/.test(parsleyField.__class__))\r\n      throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\r\n\r\n    var validatorSpec = window.Parsley._validatorRegistry.validators[name];\r\n    var validator = new ParsleyValidator(validatorSpec);\r\n\r\n    $.extend(this, {\r\n      validator: validator,\r\n      name: name,\r\n      requirements: requirements,\r\n      priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\r\n      isDomConstraint: true === isDomConstraint\r\n    });\r\n    this._parseRequirements(parsleyField.options);\r\n  };\r\n\r\n  var capitalize = function(str) {\r\n    var cap = str[0].toUpperCase();\r\n    return cap + str.slice(1);\r\n  };\r\n\r\n  ConstraintFactory.prototype = {\r\n    validate: function(value, instance) {\r\n      return this.validator.validate(value, ...this.requirementList, instance);\r\n    },\r\n\r\n    _parseRequirements: function(options) {\r\n      this.requirementList = this.validator.parseRequirements(this.requirements,\r\n        key => options[this.name + capitalize(key)]\r\n      );\r\n    }\r\n  };\n\n  var ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\r\n    this.__class__ = 'ParsleyField';\r\n\r\n    this.$element = $(field);\r\n\r\n    // Set parent if we have one\r\n    if ('undefined' !== typeof parsleyFormInstance) {\r\n      this.parent = parsleyFormInstance;\r\n    }\r\n\r\n    this.options = options;\r\n    this.domOptions = domOptions;\r\n\r\n    // Initialize some properties\r\n    this.constraints = [];\r\n    this.constraintsByName = {};\r\n    this.validationResult = true;\r\n\r\n    // Bind constraints\r\n    this._bindConstraints();\r\n  };\r\n\r\n  var parsley_field__statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\n  ParsleyField.prototype = {\r\n    // # Public API\r\n    // Validate field and trigger some events for mainly `ParsleyUI`\r\n    // @returns `true`, an array of the validators that failed, or\r\n    // `null` if validation is not finished. Prefer using whenValidate\r\n    validate: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\r\n        options = {options};\r\n      }\r\n      var promise = this.whenValidate(options);\r\n      if (!promise)  // If excluded with `group` option\r\n        return true;\r\n      switch (promise.state()) {\r\n        case 'pending': return null;\r\n        case 'resolved': return true;\r\n        case 'rejected': return this.validationResult;\r\n      }\r\n    },\r\n\r\n    // Validate field and trigger some events for mainly `ParsleyUI`\r\n    // @returns a promise that succeeds only when all validations do\r\n    // or `undefined` if field is not in the given `group`.\r\n    whenValidate: function ({force, group} =  {}) {\r\n      // do not validate a field if not the same as given validation group\r\n      this.refreshConstraints();\r\n      if (group && !this._isInGroup(group))\r\n        return;\r\n\r\n      this.value = this.getValue();\r\n\r\n      // Field Validate event. `this.value` could be altered for custom needs\r\n      this._trigger('validate');\r\n\r\n      return this.whenValid({force, value: this.value, _refreshed: true})\r\n        .always(() => { this._reflowUI(); })\r\n        .done(() =>   { this._trigger('success'); })\r\n        .fail(() =>   { this._trigger('error'); })\r\n        .always(() => { this._trigger('validated'); })\r\n        .pipe(...this._pipeAccordingToValidationResult());\r\n    },\r\n\r\n    hasConstraints: function () {\r\n      return 0 !== this.constraints.length;\r\n    },\r\n\r\n    // An empty optional field does not need validation\r\n    needsValidation: function (value) {\r\n      if ('undefined' === typeof value)\r\n        value = this.getValue();\r\n\r\n      // If a field is empty and not required, it is valid\r\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\r\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\r\n        return false;\r\n\r\n      return true;\r\n    },\r\n\r\n    _isInGroup: function (group) {\r\n      if ($.isArray(this.options.group))\r\n        return -1 !== $.inArray(group, this.options.group);\r\n      return this.options.group === group;\r\n    },\r\n\r\n    // Just validate field. Do not trigger any event.\r\n    // Returns `true` iff all constraints pass, `false` if there are failures,\r\n    // or `null` if the result can not be determined yet (depends on a promise)\r\n    // See also `whenValid`.\r\n    isValid: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\r\n        var [force, value] = arguments;\r\n        options = {force, value};\r\n      }\r\n      var promise = this.whenValid(options);\r\n      if (!promise) // Excluded via `group`\r\n        return true;\r\n      return parsley_field__statusMapping[promise.state()];\r\n    },\r\n\r\n    // Just validate field. Do not trigger any event.\r\n    // @returns a promise that succeeds only when all validations do\r\n    // or `undefined` if the field is not in the given `group`.\r\n    // The argument `force` will force validation of empty fields.\r\n    // If a `value` is given, it will be validated instead of the value of the input.\r\n    whenValid: function ({force = false, value, group, _refreshed} = {}) {\r\n      // Recompute options and rebind constraints to have latest changes\r\n      if (!_refreshed)\r\n        this.refreshConstraints();\r\n      // do not validate a field if not the same as given validation group\r\n      if (group && !this._isInGroup(group))\r\n        return;\r\n\r\n      this.validationResult = true;\r\n\r\n      // A field without constraint is valid\r\n      if (!this.hasConstraints())\r\n        return $.when();\r\n\r\n      // Value could be passed as argument, needed to add more power to 'field:validate'\r\n      if ('undefined' === typeof value || null === value)\r\n        value = this.getValue();\r\n\r\n      if (!this.needsValidation(value) && true !== force)\r\n        return $.when();\r\n\r\n      var groupedConstraints = this._getGroupedConstraints();\r\n      var promises = [];\r\n      $.each(groupedConstraints, (_, constraints) => {\r\n        // Process one group of constraints at a time, we validate the constraints\r\n        // and combine the promises together.\r\n        var promise = ParsleyUtils__default.all(\r\n          $.map(constraints, constraint => this._validateConstraint(value, constraint))\r\n        );\r\n        promises.push(promise);\r\n        if (promise.state() === 'rejected')\r\n          return false; // Interrupt processing if a group has already failed\r\n      });\r\n      return ParsleyUtils__default.all(promises);\r\n    },\r\n\r\n    // @returns a promise\r\n    _validateConstraint: function(value, constraint) {\r\n      var result = constraint.validate(value, this);\r\n      // Map false to a failed promise\r\n      if (false === result)\r\n        result = $.Deferred().reject();\r\n      // Make sure we return a promise and that we record failures\r\n      return ParsleyUtils__default.all([result]).fail(errorMessage => {\r\n        if (!(this.validationResult instanceof Array))\r\n          this.validationResult = [];\r\n        this.validationResult.push({\r\n          assert: constraint,\r\n          errorMessage: 'string' === typeof errorMessage && errorMessage\r\n        });\r\n      });\r\n    },\r\n\r\n    // @returns Parsley field computed value that could be overrided or configured in DOM\r\n    getValue: function () {\r\n      var value;\r\n\r\n      // Value could be overriden in DOM or with explicit options\r\n      if ('function' === typeof this.options.value)\r\n        value = this.options.value(this);\r\n      else if ('undefined' !== typeof this.options.value)\r\n        value = this.options.value;\r\n      else\r\n        value = this.$element.val();\r\n\r\n      // Handle wrong DOM or configurations\r\n      if ('undefined' === typeof value || null === value)\r\n        return '';\r\n\r\n      return this._handleWhitespace(value);\r\n    },\r\n\r\n    // Actualize options that could have change since previous validation\r\n    // Re-bind accordingly constraints (could be some new, removed or updated)\r\n    refreshConstraints: function () {\r\n      return this.actualizeOptions()._bindConstraints();\r\n    },\r\n\r\n    /**\r\n    * Add a new constraint to a field\r\n    *\r\n    * @param {String}   name\r\n    * @param {Mixed}    requirements      optional\r\n    * @param {Number}   priority          optional\r\n    * @param {Boolean}  isDomConstraint   optional\r\n    */\r\n    addConstraint: function (name, requirements, priority, isDomConstraint) {\r\n\r\n      if (window.Parsley._validatorRegistry.validators[name]) {\r\n        var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\r\n\r\n        // if constraint already exist, delete it and push new version\r\n        if ('undefined' !== this.constraintsByName[constraint.name])\r\n          this.removeConstraint(constraint.name);\r\n\r\n        this.constraints.push(constraint);\r\n        this.constraintsByName[constraint.name] = constraint;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Remove a constraint\r\n    removeConstraint: function (name) {\r\n      for (var i = 0; i < this.constraints.length; i++)\r\n        if (name === this.constraints[i].name) {\r\n          this.constraints.splice(i, 1);\r\n          break;\r\n        }\r\n      delete this.constraintsByName[name];\r\n      return this;\r\n    },\r\n\r\n    // Update a constraint (Remove + re-add)\r\n    updateConstraint: function (name, parameters, priority) {\r\n      return this.removeConstraint(name)\r\n        .addConstraint(name, parameters, priority);\r\n    },\r\n\r\n    // # Internals\r\n\r\n    // Internal only.\r\n    // Bind constraints from config + options + DOM\r\n    _bindConstraints: function () {\r\n      var constraints = [];\r\n      var constraintsByName = {};\r\n\r\n      // clean all existing DOM constraints to only keep javascript user constraints\r\n      for (var i = 0; i < this.constraints.length; i++)\r\n        if (false === this.constraints[i].isDomConstraint) {\r\n          constraints.push(this.constraints[i]);\r\n          constraintsByName[this.constraints[i].name] = this.constraints[i];\r\n        }\r\n\r\n      this.constraints = constraints;\r\n      this.constraintsByName = constraintsByName;\r\n\r\n      // then re-add Parsley DOM-API constraints\r\n      for (var name in this.options)\r\n        this.addConstraint(name, this.options[name], undefined, true);\r\n\r\n      // finally, bind special HTML5 constraints\r\n      return this._bindHtml5Constraints();\r\n    },\r\n\r\n    // Internal only.\r\n    // Bind specific HTML5 constraints to be HTML5 compliant\r\n    _bindHtml5Constraints: function () {\r\n      // html5 required\r\n      if (this.$element.hasClass('required') || this.$element.attr('required'))\r\n        this.addConstraint('required', true, undefined, true);\r\n\r\n      // html5 pattern\r\n      if ('string' === typeof this.$element.attr('pattern'))\r\n        this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\r\n\r\n      // range\r\n      if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\r\n        this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\r\n\r\n      // HTML5 min\r\n      else if ('undefined' !== typeof this.$element.attr('min'))\r\n        this.addConstraint('min', this.$element.attr('min'), undefined, true);\r\n\r\n      // HTML5 max\r\n      else if ('undefined' !== typeof this.$element.attr('max'))\r\n        this.addConstraint('max', this.$element.attr('max'), undefined, true);\r\n\r\n\r\n      // length\r\n      if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\r\n        this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\r\n\r\n      // HTML5 minlength\r\n      else if ('undefined' !== typeof this.$element.attr('minlength'))\r\n        this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\r\n\r\n      // HTML5 maxlength\r\n      else if ('undefined' !== typeof this.$element.attr('maxlength'))\r\n        this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\r\n\r\n\r\n      // html5 types\r\n      var type = this.$element.attr('type');\r\n\r\n      if ('undefined' === typeof type)\r\n        return this;\r\n\r\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\r\n      if ('number' === type) {\r\n        return this.addConstraint('type', ['number', {\r\n          step: this.$element.attr('step'),\r\n          base: this.$element.attr('min') || this.$element.attr('value')\r\n        }], undefined, true);\r\n      // Regular other HTML5 supported types\r\n      } else if (/^(email|url|range)$/i.test(type)) {\r\n        return this.addConstraint('type', type, undefined, true);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    // Internal only.\r\n    // Field is required if have required constraint without `false` value\r\n    _isRequired: function () {\r\n      if ('undefined' === typeof this.constraintsByName.required)\r\n        return false;\r\n\r\n      return false !== this.constraintsByName.required.requirements;\r\n    },\r\n\r\n    // Internal only.\r\n    // Shortcut to trigger an event\r\n    _trigger: function (eventName) {\r\n      return this.trigger('field:' + eventName);\r\n    },\r\n\r\n    // Internal only\r\n    // Handles whitespace in a value\r\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\r\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\r\n    _handleWhitespace: function (value) {\r\n      if (true === this.options.trimValue)\r\n        ParsleyUtils__default.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\r\n\r\n      if ('squish' === this.options.whitespace)\r\n        value = value.replace(/\\s{2,}/g, ' ');\r\n\r\n      if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\r\n        value = ParsleyUtils__default.trimString(value);\r\n\r\n      return value;\r\n    },\r\n\r\n    // Internal only.\r\n    // Returns the constraints, grouped by descending priority.\r\n    // The result is thus an array of arrays of constraints.\r\n    _getGroupedConstraints: function () {\r\n      if (false === this.options.priorityEnabled)\r\n        return [this.constraints];\r\n\r\n      var groupedConstraints = [];\r\n      var index = {};\r\n\r\n      // Create array unique of priorities\r\n      for (var i = 0; i < this.constraints.length; i++) {\r\n        var p = this.constraints[i].priority;\r\n        if (!index[p])\r\n          groupedConstraints.push(index[p] = []);\r\n        index[p].push(this.constraints[i]);\r\n      }\r\n      // Sort them by priority DESC\r\n      groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\r\n\r\n      return groupedConstraints;\r\n    }\r\n\r\n  };\r\n\r\n  var parsley_field = ParsleyField;\n\n  var ParsleyMultiple = function () {\r\n    this.__class__ = 'ParsleyFieldMultiple';\r\n  };\r\n\r\n  ParsleyMultiple.prototype = {\r\n    // Add new `$element` sibling for multiple field\r\n    addElement: function ($element) {\r\n      this.$elements.push($element);\r\n\r\n      return this;\r\n    },\r\n\r\n    // See `ParsleyField.refreshConstraints()`\r\n    refreshConstraints: function () {\r\n      var fieldConstraints;\r\n\r\n      this.constraints = [];\r\n\r\n      // Select multiple special treatment\r\n      if (this.$element.is('select')) {\r\n        this.actualizeOptions()._bindConstraints();\r\n\r\n        return this;\r\n      }\r\n\r\n      // Gather all constraints for each input in the multiple group\r\n      for (var i = 0; i < this.$elements.length; i++) {\r\n\r\n        // Check if element have not been dynamically removed since last binding\r\n        if (!$('html').has(this.$elements[i]).length) {\r\n          this.$elements.splice(i, 1);\r\n          continue;\r\n        }\r\n\r\n        fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\r\n\r\n        for (var j = 0; j < fieldConstraints.length; j++)\r\n          this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // See `ParsleyField.getValue()`\r\n    getValue: function () {\r\n      // Value could be overriden in DOM\r\n      if ('function' === typeof this.options.value)\r\n        return this.options.value(this);\r\n      else if ('undefined' !== typeof this.options.value)\r\n        return this.options.value;\r\n\r\n      // Radio input case\r\n      if (this.$element.is('input[type=radio]'))\r\n        return this._findRelated().filter(':checked').val() || '';\r\n\r\n      // checkbox input case\r\n      if (this.$element.is('input[type=checkbox]')) {\r\n        var values = [];\r\n\r\n        this._findRelated().filter(':checked').each(function () {\r\n          values.push($(this).val());\r\n        });\r\n\r\n        return values;\r\n      }\r\n\r\n      // Select multiple case\r\n      if (this.$element.is('select') && null === this.$element.val())\r\n        return [];\r\n\r\n      // Default case that should never happen\r\n      return this.$element.val();\r\n    },\r\n\r\n    _init: function () {\r\n      this.$elements = [this.$element];\r\n\r\n      return this;\r\n    }\r\n  };\n\n  var ParsleyFactory = function (element, options, parsleyFormInstance) {\r\n    this.$element = $(element);\r\n\r\n    // If the element has already been bound, returns its saved Parsley instance\r\n    var savedparsleyFormInstance = this.$element.data('Parsley');\r\n    if (savedparsleyFormInstance) {\r\n\r\n      // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\r\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\r\n        savedparsleyFormInstance.parent = parsleyFormInstance;\r\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\r\n      }\r\n\r\n      if ('object' === typeof options) {\r\n        $.extend(savedparsleyFormInstance.options, options);\r\n      }\r\n\r\n      return savedparsleyFormInstance;\r\n    }\r\n\r\n    // Parsley must be instantiated with a DOM element or jQuery $element\r\n    if (!this.$element.length)\r\n      throw new Error('You must bind Parsley on an existing element.');\r\n\r\n    if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\r\n      throw new Error('Parent instance must be a ParsleyForm instance');\r\n\r\n    this.parent = parsleyFormInstance || window.Parsley;\r\n    return this.init(options);\r\n  };\r\n\r\n  ParsleyFactory.prototype = {\r\n    init: function (options) {\r\n      this.__class__ = 'Parsley';\r\n      this.__version__ = '2.4.3';\r\n      this.__id__ = ParsleyUtils__default.generateID();\r\n\r\n      // Pre-compute options\r\n      this._resetOptions(options);\r\n\r\n      // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\r\n      if (this.$element.is('form') || (ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\r\n        return this.bind('parsleyForm');\r\n\r\n      // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\r\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\r\n    },\r\n\r\n    isMultiple: function () {\r\n      return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\r\n    },\r\n\r\n    // Multiples fields are a real nightmare :(\r\n    // Maybe some refactoring would be appreciated here...\r\n    handleMultiple: function () {\r\n      var name;\r\n      var multiple;\r\n      var parsleyMultipleInstance;\r\n\r\n      // Handle multiple name\r\n      if (this.options.multiple)\r\n        ; // We already have our 'multiple' identifier\r\n      else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\r\n        this.options.multiple = name = this.$element.attr('name');\r\n      else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\r\n        this.options.multiple = this.$element.attr('id');\r\n\r\n      // Special select multiple input\r\n      if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\r\n        this.options.multiple = this.options.multiple || this.__id__;\r\n        return this.bind('parsleyFieldMultiple');\r\n\r\n      // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\r\n      } else if (!this.options.multiple) {\r\n        ParsleyUtils__default.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\r\n        return this;\r\n      }\r\n\r\n      // Remove special chars\r\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\r\n\r\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\r\n      if ('undefined' !== typeof name) {\r\n        $('input[name=\"' + name + '\"]').each((i, input) => {\r\n          if ($(input).is('input[type=radio], input[type=checkbox]'))\r\n            $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\r\n        });\r\n      }\r\n\r\n      // Check here if we don't already have a related multiple instance saved\r\n      var $previouslyRelated = this._findRelated();\r\n      for (var i = 0; i < $previouslyRelated.length; i++) {\r\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\r\n        if ('undefined' !== typeof parsleyMultipleInstance) {\r\n\r\n          if (!this.$element.data('ParsleyFieldMultiple')) {\r\n            parsleyMultipleInstance.addElement(this.$element);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\r\n      // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\r\n      this.bind('parsleyField', true);\r\n\r\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\r\n    },\r\n\r\n    // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\r\n    bind: function (type, doNotStore) {\r\n      var parsleyInstance;\r\n\r\n      switch (type) {\r\n        case 'parsleyForm':\r\n          parsleyInstance = $.extend(\r\n            new ParsleyForm(this.$element, this.domOptions, this.options),\r\n            new ParsleyAbstract(),\r\n            window.ParsleyExtend\r\n          )._bindFields();\r\n          break;\r\n        case 'parsleyField':\r\n          parsleyInstance = $.extend(\r\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\r\n            new ParsleyAbstract(),\r\n            window.ParsleyExtend\r\n          );\r\n          break;\r\n        case 'parsleyFieldMultiple':\r\n          parsleyInstance = $.extend(\r\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\r\n            new ParsleyMultiple(),\r\n            new ParsleyAbstract(),\r\n            window.ParsleyExtend\r\n          )._init();\r\n          break;\r\n        default:\r\n          throw new Error(type + 'is not a supported Parsley type');\r\n      }\r\n\r\n      if (this.options.multiple)\r\n        ParsleyUtils__default.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\r\n\r\n      if ('undefined' !== typeof doNotStore) {\r\n        this.$element.data('ParsleyFieldMultiple', parsleyInstance);\r\n\r\n        return parsleyInstance;\r\n      }\r\n\r\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\r\n      this.$element.data('Parsley', parsleyInstance);\r\n\r\n      // Tell the world we have a new ParsleyForm or ParsleyField instance!\r\n      parsleyInstance._actualizeTriggers();\r\n      parsleyInstance._trigger('init');\r\n\r\n      return parsleyInstance;\r\n    }\r\n  };\n\n  var vernums = $.fn.jquery.split('.');\r\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\r\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\r\n  }\r\n  if (!vernums.forEach) {\r\n    ParsleyUtils__default.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\r\n  }\r\n  // Inherit `on`, `off` & `trigger` to Parsley:\r\n  var Parsley = $.extend(new ParsleyAbstract(), {\r\n      $element: $(document),\r\n      actualizeOptions: null,\r\n      _resetOptions: null,\r\n      Factory: ParsleyFactory,\r\n      version: '2.4.3'\r\n    });\r\n\r\n  // Supplement ParsleyField and Form with ParsleyAbstract\r\n  // This way, the constructors will have access to those methods\r\n  $.extend(parsley_field.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);\r\n  $.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);\r\n  // Inherit actualizeOptions and _resetOptions:\r\n  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\r\n\r\n  // ### jQuery API\r\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\r\n  $.fn.parsley = $.fn.psly = function (options) {\r\n    if (this.length > 1) {\r\n      var instances = [];\r\n\r\n      this.each(function () {\r\n        instances.push($(this).parsley(options));\r\n      });\r\n\r\n      return instances;\r\n    }\r\n\r\n    // Return undefined if applied to non existing DOM element\r\n    if (!$(this).length) {\r\n      ParsleyUtils__default.warn('You must bind Parsley on an existing element.');\r\n\r\n      return;\r\n    }\r\n\r\n    return new ParsleyFactory(this, options);\r\n  };\r\n\r\n  // ### ParsleyField and ParsleyForm extension\r\n  // Ensure the extension is now defined if it wasn't previously\r\n  if ('undefined' === typeof window.ParsleyExtend)\r\n    window.ParsleyExtend = {};\r\n\r\n  // ### Parsley config\r\n  // Inherit from ParsleyDefault, and copy over any existing values\r\n  Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);\r\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\r\n\r\n  // ### Globals\r\n  window.Parsley = window.psly = Parsley;\r\n  window.ParsleyUtils = ParsleyUtils__default;\r\n\r\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\r\n  var registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\r\n  window.ParsleyValidator = {};\r\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\r\n    window.Parsley[method] = $.proxy(registry, method);\r\n    window.ParsleyValidator[method] = function () {\r\n      ParsleyUtils__default.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\r\n      return window.Parsley[method](...arguments);\r\n    };\r\n  });\r\n\r\n  // ### ParsleyUI\r\n  // Deprecated global object\r\n  window.Parsley.UI = ParsleyUI;\r\n  window.ParsleyUI = {\r\n    removeError: function (instance, name, doNotUpdateClass) {\r\n      var updateClass = true !== doNotUpdateClass;\r\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n      return instance.removeError(name, {updateClass});\r\n    },\r\n    getErrorsMessages: function (instance) {\r\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\r\n      return instance.getErrorsMessages();\r\n    }\r\n  };\r\n  $.each('addError updateError'.split(' '), function (i, method) {\r\n    window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\r\n      var updateClass = true !== doNotUpdateClass;\r\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n      return instance[method](name, {message, assert, updateClass});\r\n    };\r\n  });\r\n\r\n  // ### PARSLEY auto-binding\r\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\r\n  if (false !== window.ParsleyConfig.autoBind) {\r\n    $(function () {\r\n      // Works only on `data-parsley-validate`.\r\n      if ($('[data-parsley-validate]').length)\r\n        $('[data-parsley-validate]').parsley();\r\n    });\r\n  }\n\n  var o = $({});\r\n  var deprecated = function () {\r\n    ParsleyUtils__default.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\r\n  };\r\n\r\n  // Returns an event handler that calls `fn` with the arguments it expects\r\n  function adapt(fn, context) {\r\n    // Store to allow unbinding\r\n    if (!fn.parsleyAdaptedCallback) {\r\n      fn.parsleyAdaptedCallback = function () {\r\n        var args = Array.prototype.slice.call(arguments, 0);\r\n        args.unshift(this);\r\n        fn.apply(context || o, args);\r\n      };\r\n    }\r\n    return fn.parsleyAdaptedCallback;\r\n  }\r\n\r\n  var eventPrefix = 'parsley:';\r\n  // Converts 'parsley:form:validate' into 'form:validate'\r\n  function eventName(name) {\r\n    if (name.lastIndexOf(eventPrefix, 0) === 0)\r\n      return name.substr(eventPrefix.length);\r\n    return name;\r\n  }\r\n\r\n  // $.listen is deprecated. Use Parsley.on instead.\r\n  $.listen = function (name, callback) {\r\n    var context;\r\n    deprecated();\r\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\r\n      context = arguments[1];\r\n      callback = arguments[2];\r\n    }\r\n\r\n    if ('function' !== typeof callback)\r\n      throw new Error('Wrong parameters');\r\n\r\n    window.Parsley.on(eventName(name), adapt(callback, context));\r\n  };\r\n\r\n  $.listenTo = function (instance, name, fn) {\r\n    deprecated();\r\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\r\n      throw new Error('Must give Parsley instance');\r\n\r\n    if ('string' !== typeof name || 'function' !== typeof fn)\r\n      throw new Error('Wrong parameters');\r\n\r\n    instance.on(eventName(name), adapt(fn));\r\n  };\r\n\r\n  $.unsubscribe = function (name, fn) {\r\n    deprecated();\r\n    if ('string' !== typeof name || 'function' !== typeof fn)\r\n      throw new Error('Wrong arguments');\r\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\r\n  };\r\n\r\n  $.unsubscribeTo = function (instance, name) {\r\n    deprecated();\r\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\r\n      throw new Error('Must give Parsley instance');\r\n    instance.off(eventName(name));\r\n  };\r\n\r\n  $.unsubscribeAll = function (name) {\r\n    deprecated();\r\n    window.Parsley.off(eventName(name));\r\n    $('form,input,textarea,select').each(function () {\r\n      var instance = $(this).data('Parsley');\r\n      if (instance) {\r\n        instance.off(eventName(name));\r\n      }\r\n    });\r\n  };\r\n\r\n  // $.emit is deprecated. Use jQuery events instead.\r\n  $.emit = function (name, instance) {\r\n    deprecated();\r\n    var instanceGiven = (instance instanceof parsley_field) || (instance instanceof ParsleyForm);\r\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\r\n    args.unshift(eventName(name));\r\n    if (!instanceGiven) {\r\n      instance = window.Parsley;\r\n    }\r\n    instance.trigger(...args);\r\n  };\r\n\r\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\r\n    asyncValidators: {\r\n      'default': {\r\n        fn: function (xhr) {\r\n          // By default, only status 2xx are deemed successful.\r\n          // Note: we use status instead of state() because responses with status 200\r\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\r\n          // result in state() === 'rejected'.\r\n          return xhr.status >= 200 && xhr.status < 300;\r\n        },\r\n        url: false\r\n      },\r\n      reverse: {\r\n        fn: function (xhr) {\r\n          // If reverse option is set, a failing ajax request is considered successful\r\n          return xhr.status < 200 || xhr.status >= 300;\r\n        },\r\n        url: false\r\n      }\r\n    },\r\n\r\n    addAsyncValidator: function (name, fn, url, options) {\r\n      Parsley.asyncValidators[name] = {\r\n        fn: fn,\r\n        url: url || false,\r\n        options: options || {}\r\n      };\r\n\r\n      return this;\r\n    }\r\n\r\n  });\r\n\r\n  Parsley.addValidator('remote', {\r\n    requirementType: {\r\n      '': 'string',\r\n      'validator': 'string',\r\n      'reverse': 'boolean',\r\n      'options': 'object'\r\n    },\r\n\r\n    validateString: function (value, url, options, instance) {\r\n      var data = {};\r\n      var ajaxOptions;\r\n      var csr;\r\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\r\n\r\n      if ('undefined' === typeof Parsley.asyncValidators[validator])\r\n        throw new Error('Calling an undefined async validator: `' + validator + '`');\r\n\r\n      url = Parsley.asyncValidators[validator].url || url;\r\n\r\n      // Fill current value\r\n      if (url.indexOf('{value}') > -1) {\r\n        url = url.replace('{value}', encodeURIComponent(value));\r\n      } else {\r\n        data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\r\n      }\r\n\r\n      // Merge options passed in from the function with the ones in the attribute\r\n      var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\r\n\r\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\r\n      ajaxOptions = $.extend(true, {}, {\r\n        url: url,\r\n        data: data,\r\n        type: 'GET'\r\n      }, remoteOptions);\r\n\r\n      // Generate store key based on ajax options\r\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\r\n\r\n      csr = $.param(ajaxOptions);\r\n\r\n      // Initialise querry cache\r\n      if ('undefined' === typeof Parsley._remoteCache)\r\n        Parsley._remoteCache = {};\r\n\r\n      // Try to retrieve stored xhr\r\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\r\n\r\n      var handleXhr = function () {\r\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\r\n        if (!result) // Map falsy results to rejected promise\r\n          result = $.Deferred().reject();\r\n        return $.when(result);\r\n      };\r\n\r\n      return xhr.then(handleXhr, handleXhr);\r\n    },\r\n\r\n    priority: -1\r\n  });\r\n\r\n  Parsley.on('form:submit', function () {\r\n    Parsley._remoteCache = {};\r\n  });\r\n\r\n  window.ParsleyExtend.addAsyncValidator = function () {\r\n    ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\r\n    return Parsley.addAsyncValidator(...arguments);\r\n  };\n\n  // This is included with the Parsley library itself,\r\n  // thus there is no use in adding it to your project.\r\n  Parsley.addMessages('en', {\r\n    defaultMessage: \"This value seems to be invalid.\",\r\n    type: {\r\n      email:        \"This value should be a valid email.\",\r\n      url:          \"This value should be a valid url.\",\r\n      number:       \"This value should be a valid number.\",\r\n      integer:      \"This value should be a valid integer.\",\r\n      digits:       \"This value should be digits.\",\r\n      alphanum:     \"This value should be alphanumeric.\"\r\n    },\r\n    notblank:       \"This value should not be blank.\",\r\n    required:       \"This value is required.\",\r\n    pattern:        \"This value seems to be invalid.\",\r\n    min:            \"This value should be greater than or equal to %s.\",\r\n    max:            \"This value should be lower than or equal to %s.\",\r\n    range:          \"This value should be between %s and %s.\",\r\n    minlength:      \"This value is too short. It should have %s characters or more.\",\r\n    maxlength:      \"This value is too long. It should have %s characters or fewer.\",\r\n    length:         \"This value length is invalid. It should be between %s and %s characters long.\",\r\n    mincheck:       \"You must select at least %s choices.\",\r\n    maxcheck:       \"You must select %s choices or fewer.\",\r\n    check:          \"You must select between %s and %s choices.\",\r\n    equalto:        \"This value should be the same.\"\r\n  });\r\n\r\n  Parsley.setLocale('en');\n\n  /**\r\n   * inputevent - Alleviate browser bugs for input events\r\n   * https://github.com/marcandre/inputevent\r\n   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\r\n   * @author Marc-Andre Lafortune <github@marc-andre.ca>\r\n   * @license MIT\r\n   */\r\n\r\n  function InputEvent() {\r\n    let globals = window || global;\r\n\r\n    // Slightly odd way construct our object. This way methods are force bound.\r\n    // Used to test for duplicate library.\r\n    $.extend(this, {\r\n\r\n      // For browsers that do not support isTrusted, assumes event is native.\r\n      isNativeEvent: evt => {\r\n        return evt.originalEvent && evt.originalEvent.isTrusted !== false;\r\n      },\r\n\r\n      fakeInputEvent: evt => {\r\n        if (this.isNativeEvent(evt)) {\r\n          $(evt.target).trigger('input');\r\n        }\r\n      },\r\n\r\n      misbehaves: evt => {\r\n        if (this.isNativeEvent(evt)) {\r\n          this.behavesOk(evt);\r\n          $(document)\r\n            .on('change.inputevent', evt.data.selector, this.fakeInputEvent);\r\n          this.fakeInputEvent(evt);\r\n        }\r\n      },\r\n\r\n      behavesOk: evt => {\r\n        if (this.isNativeEvent(evt)) {\r\n          $(document) // Simply unbinds the testing handler\r\n            .off('input.inputevent', evt.data.selector, this.behavesOk)\r\n            .off('change.inputevent', evt.data.selector, this.misbehaves);\r\n        }\r\n      },\r\n\r\n      // Bind the testing handlers\r\n      install: () => {\r\n        if (globals.inputEventPatched) {\r\n          return;\r\n        }\r\n        globals.inputEventPatched = '0.0.3';\r\n        for (let selector of ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]', 'input[type=\"file\"]']) {\r\n          $(document)\r\n            .on('input.inputevent', selector, {selector}, this.behavesOk)\r\n            .on('change.inputevent', selector, {selector}, this.misbehaves);\r\n        }\r\n      },\r\n\r\n      uninstall: () => {\r\n        delete globals.inputEventPatched;\r\n        $(document).off('.inputevent');\r\n      }\r\n\r\n    });\r\n  };\r\n\r\n  var inputevent = new InputEvent();\n\n  inputevent.install();\r\n\r\n  var parsley = Parsley;\n\n  return parsley;\n\n}));\n","import $ from 'jquery';\r\nimport ParsleyField from './field';\r\nimport ParsleyForm from './form';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar o = $({});\r\nvar deprecated = function () {\r\n  ParsleyUtils.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\r\n};\r\n\r\n// Returns an event handler that calls `fn` with the arguments it expects\r\nfunction adapt(fn, context) {\r\n  // Store to allow unbinding\r\n  if (!fn.parsleyAdaptedCallback) {\r\n    fn.parsleyAdaptedCallback = function () {\r\n      var args = Array.prototype.slice.call(arguments, 0);\r\n      args.unshift(this);\r\n      fn.apply(context || o, args);\r\n    };\r\n  }\r\n  return fn.parsleyAdaptedCallback;\r\n}\r\n\r\nvar eventPrefix = 'parsley:';\r\n// Converts 'parsley:form:validate' into 'form:validate'\r\nfunction eventName(name) {\r\n  if (name.lastIndexOf(eventPrefix, 0) === 0)\r\n    return name.substr(eventPrefix.length);\r\n  return name;\r\n}\r\n\r\n// $.listen is deprecated. Use Parsley.on instead.\r\n$.listen = function (name, callback) {\r\n  var context;\r\n  deprecated();\r\n  if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\r\n    context = arguments[1];\r\n    callback = arguments[2];\r\n  }\r\n\r\n  if ('function' !== typeof callback)\r\n    throw new Error('Wrong parameters');\r\n\r\n  window.Parsley.on(eventName(name), adapt(callback, context));\r\n};\r\n\r\n$.listenTo = function (instance, name, fn) {\r\n  deprecated();\r\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\r\n    throw new Error('Must give Parsley instance');\r\n\r\n  if ('string' !== typeof name || 'function' !== typeof fn)\r\n    throw new Error('Wrong parameters');\r\n\r\n  instance.on(eventName(name), adapt(fn));\r\n};\r\n\r\n$.unsubscribe = function (name, fn) {\r\n  deprecated();\r\n  if ('string' !== typeof name || 'function' !== typeof fn)\r\n    throw new Error('Wrong arguments');\r\n  window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\r\n};\r\n\r\n$.unsubscribeTo = function (instance, name) {\r\n  deprecated();\r\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\r\n    throw new Error('Must give Parsley instance');\r\n  instance.off(eventName(name));\r\n};\r\n\r\n$.unsubscribeAll = function (name) {\r\n  deprecated();\r\n  window.Parsley.off(eventName(name));\r\n  $('form,input,textarea,select').each(function () {\r\n    var instance = $(this).data('Parsley');\r\n    if (instance) {\r\n      instance.off(eventName(name));\r\n    }\r\n  });\r\n};\r\n\r\n// $.emit is deprecated. Use jQuery events instead.\r\n$.emit = function (name, instance) {\r\n  deprecated();\r\n  var instanceGiven = (instance instanceof ParsleyField) || (instance instanceof ParsleyForm);\r\n  var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\r\n  args.unshift(eventName(name));\r\n  if (!instanceGiven) {\r\n    instance = window.Parsley;\r\n  }\r\n  instance.trigger(...args);\r\n};\r\n\r\nexport default {};\r\n","/**\r\n * inputevent - Alleviate browser bugs for input events\r\n * https://github.com/marcandre/inputevent\r\n * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\r\n * @author Marc-Andre Lafortune <github@marc-andre.ca>\r\n * @license MIT\r\n */\r\n\r\nimport $ from 'jquery';\r\n\r\nfunction InputEvent() {\r\n  let globals = window || global;\r\n\r\n  // Slightly odd way construct our object. This way methods are force bound.\r\n  // Used to test for duplicate library.\r\n  $.extend(this, {\r\n\r\n    // For browsers that do not support isTrusted, assumes event is native.\r\n    isNativeEvent: evt => {\r\n      return evt.originalEvent && evt.originalEvent.isTrusted !== false;\r\n    },\r\n\r\n    fakeInputEvent: evt => {\r\n      if (this.isNativeEvent(evt)) {\r\n        $(evt.target).trigger('input');\r\n      }\r\n    },\r\n\r\n    misbehaves: evt => {\r\n      if (this.isNativeEvent(evt)) {\r\n        this.behavesOk(evt);\r\n        $(document)\r\n          .on('change.inputevent', evt.data.selector, this.fakeInputEvent);\r\n        this.fakeInputEvent(evt);\r\n      }\r\n    },\r\n\r\n    behavesOk: evt => {\r\n      if (this.isNativeEvent(evt)) {\r\n        $(document) // Simply unbinds the testing handler\r\n          .off('input.inputevent', evt.data.selector, this.behavesOk)\r\n          .off('change.inputevent', evt.data.selector, this.misbehaves);\r\n      }\r\n    },\r\n\r\n    // Bind the testing handlers\r\n    install: () => {\r\n      if (globals.inputEventPatched) {\r\n        return;\r\n      }\r\n      globals.inputEventPatched = '0.0.3';\r\n      for (let selector of ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]', 'input[type=\"file\"]']) {\r\n        $(document)\r\n          .on('input.inputevent', selector, {selector}, this.behavesOk)\r\n          .on('change.inputevent', selector, {selector}, this.misbehaves);\r\n      }\r\n    },\r\n\r\n    uninstall: () => {\r\n      delete globals.inputEventPatched;\r\n      $(document).off('.inputevent');\r\n    }\r\n\r\n  });\r\n};\r\n\r\nexport default new InputEvent();\r\n","import $ from 'jquery';\r\n\r\nvar globalID = 1;\r\nvar pastWarnings = {};\r\n\r\nvar ParsleyUtils = {\r\n  // Parsley DOM-API\r\n  // returns object from dom attributes and values\r\n  attr: function ($element, namespace, obj) {\r\n    var i;\r\n    var attribute;\r\n    var attributes;\r\n    var regex = new RegExp('^' + namespace, 'i');\r\n\r\n    if ('undefined' === typeof obj)\r\n      obj = {};\r\n    else {\r\n      // Clear all own properties. This won't affect prototype's values\r\n      for (i in obj) {\r\n        if (obj.hasOwnProperty(i))\r\n          delete obj[i];\r\n      }\r\n    }\r\n\r\n    if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\r\n      return obj;\r\n\r\n    attributes = $element[0].attributes;\r\n    for (i = attributes.length; i--; ) {\r\n      attribute = attributes[i];\r\n\r\n      if (attribute && attribute.specified && regex.test(attribute.name)) {\r\n        obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\r\n      }\r\n    }\r\n\r\n    return obj;\r\n  },\r\n\r\n  checkAttr: function ($element, namespace, checkAttr) {\r\n    return $element.is('[' + namespace + checkAttr + ']');\r\n  },\r\n\r\n  setAttr: function ($element, namespace, attr, value) {\r\n    $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\r\n  },\r\n\r\n  generateID: function () {\r\n    return '' + globalID++;\r\n  },\r\n\r\n  /** Third party functions **/\r\n  // Zepto deserialize function\r\n  deserializeValue: function (value) {\r\n    var num;\r\n\r\n    try {\r\n      return value ?\r\n        value == \"true\" ||\r\n        (value == \"false\" ? false :\r\n        value == \"null\" ? null :\r\n        !isNaN(num = Number(value)) ? num :\r\n        /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\r\n        value)\r\n        : value;\r\n    } catch (e) { return value; }\r\n  },\r\n\r\n  // Zepto camelize function\r\n  camelize: function (str) {\r\n    return str.replace(/-+(.)?/g, function (match, chr) {\r\n      return chr ? chr.toUpperCase() : '';\r\n    });\r\n  },\r\n\r\n  // Zepto dasherize function\r\n  dasherize: function (str) {\r\n    return str.replace(/::/g, '/')\r\n      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n      .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n      .replace(/_/g, '-')\r\n      .toLowerCase();\r\n  },\r\n\r\n  warn: function () {\r\n    if (window.console && 'function' === typeof window.console.warn)\r\n      window.console.warn(...arguments);\r\n  },\r\n\r\n  warnOnce: function(msg) {\r\n    if (!pastWarnings[msg]) {\r\n      pastWarnings[msg] = true;\r\n      this.warn(...arguments);\r\n    }\r\n  },\r\n\r\n  _resetWarnings: function () {\r\n    pastWarnings = {};\r\n  },\r\n\r\n  trimString: function(string) {\r\n    return string.replace(/^\\s+|\\s+$/g, '');\r\n  },\r\n\r\n  namespaceEvents: function(events, namespace) {\r\n    events = this.trimString(events || '').split(/\\s+/);\r\n    if (!events[0])\r\n      return '';\r\n    return $.map(events, evt => `${evt}.${namespace}`).join(' ');\r\n  },\r\n\r\n  difference: function(array, remove) {\r\n    // This is O(N^2), should be optimized\r\n    let result = [];\r\n    $.each(array, (_, elem) => {\r\n      if (remove.indexOf(elem) == -1)\r\n        result.push(elem);\r\n    });\r\n    return result;\r\n  },\r\n\r\n  // Alter-ego to native Promise.all, but for jQuery\r\n  all: function(promises) {\r\n    // jQuery treats $.when() and $.when(singlePromise) differently; let's avoid that and add spurious elements\r\n    return $.when(...promises, 42, 42);\r\n  },\r\n\r\n  // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\r\n  objectCreate: Object.create || (function () {\r\n    var Object = function () {};\r\n    return function (prototype) {\r\n      if (arguments.length > 1) {\r\n        throw Error('Second argument not supported');\r\n      }\r\n      if (typeof prototype != 'object') {\r\n        throw TypeError('Argument must be an object');\r\n      }\r\n      Object.prototype = prototype;\r\n      var result = new Object();\r\n      Object.prototype = null;\r\n      return result;\r\n    };\r\n  })()\r\n};\r\n\r\nexport default ParsleyUtils;\r\n","// All these options could be overriden and specified directly in DOM using\n// `data-parsley-` default DOM-API\n// eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n// eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\nvar ParsleyDefaults = {\n  // ### General\n\n  // Default data-namespace for DOM API\n  namespace: 'data-parsley-',\n\n  // Supported inputs by default\n  inputs: 'input, textarea, select',\n\n  // Excluded inputs by default\n  excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n  // Stop validating field on highest priority failing constraint\n  priorityEnabled: true,\n\n  // ### Field only\n\n  // identifier used to group together inputs (e.g. radio buttons...)\n  multiple: null,\n\n  // identifier (or array of identifiers) used to validate only a select group of inputs\n  group: null,\n\n  // ### UI\n  // Enable\\Disable error messages\n  uiEnabled: true,\n\n  // Key events threshold before validation\n  validationThreshold: 3,\n\n  // Focused field on form validation error. 'first'|'last'|'none'\n  focus: 'first',\n\n  // event(s) that will trigger validation before first failure. eg: `input`...\n  trigger: false,\n\n  // event(s) that will trigger validation after first failure.\n  triggerAfterFailure: 'input',\n\n  // Class that would be added on every failing validation Parsley field\n  errorClass: 'parsley-error',\n\n  // Same for success validation\n  successClass: 'parsley-success',\n\n  // Return the `$element` that will receive these above success or error classes\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  classHandler: function (ParsleyField) {},\n\n  // Return the `$element` where errors will be appended\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  errorsContainer: function (ParsleyField) {},\n\n  // ul elem that would receive errors' list\n  errorsWrapper: '<i class=\"parsley-errors-list\"></i>',\n\n  // li elem that would receive error message\n  errorTemplate: '<i></i>'\n};\n\nexport default ParsleyDefaults;\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar ParsleyAbstract = function () {\r\n  this.__id__ = ParsleyUtils.generateID();\r\n};\r\n\r\nParsleyAbstract.prototype = {\r\n  asyncSupport: true, // Deprecated\r\n\r\n  _pipeAccordingToValidationResult: function () {\r\n    var pipe = () => {\r\n      var r = $.Deferred();\r\n      if (true !== this.validationResult)\r\n        r.reject();\r\n      return r.resolve().promise();\r\n    };\r\n    return [pipe, pipe];\r\n  },\r\n\r\n  actualizeOptions: function () {\r\n    ParsleyUtils.attr(this.$element, this.options.namespace, this.domOptions);\r\n    if (this.parent && this.parent.actualizeOptions)\r\n      this.parent.actualizeOptions();\r\n    return this;\r\n  },\r\n\r\n  _resetOptions: function (initOptions) {\r\n    this.domOptions = ParsleyUtils.objectCreate(this.parent.options);\r\n    this.options = ParsleyUtils.objectCreate(this.domOptions);\r\n    // Shallow copy of ownProperties of initOptions:\r\n    for (var i in initOptions) {\r\n      if (initOptions.hasOwnProperty(i))\r\n        this.options[i] = initOptions[i];\r\n    }\r\n    this.actualizeOptions();\r\n  },\r\n\r\n  _listeners: null,\r\n\r\n  // Register a callback for the given event name\r\n  // Callback is called with context as the first argument and the `this`\r\n  // The context is the current parsley instance, or window.Parsley if global\r\n  // A return value of `false` will interrupt the calls\r\n  on: function (name, fn) {\r\n    this._listeners = this._listeners || {};\r\n    var queue = this._listeners[name] = this._listeners[name] || [];\r\n    queue.push(fn);\r\n\r\n    return this;\r\n  },\r\n\r\n  // Deprecated. Use `on` instead\r\n  subscribe: function(name, fn) {\r\n    $.listenTo(this, name.toLowerCase(), fn);\r\n  },\r\n\r\n  // Unregister a callback (or all if none is given) for the given event name\r\n  off: function (name, fn) {\r\n    var queue = this._listeners && this._listeners[name];\r\n    if (queue) {\r\n      if (!fn) {\r\n        delete this._listeners[name];\r\n      } else {\r\n        for (var i = queue.length; i--; )\r\n          if (queue[i] === fn)\r\n            queue.splice(i, 1);\r\n      }\r\n    }\r\n    return this;\r\n  },\r\n\r\n  // Deprecated. Use `off`\r\n  unsubscribe: function(name, fn) {\r\n    $.unsubscribeTo(this, name.toLowerCase());\r\n  },\r\n\r\n  // Trigger an event of the given name\r\n  // A return value of `false` interrupts the callback chain\r\n  // Returns false if execution was interrupted\r\n  trigger: function (name, target, extraArg) {\r\n    target = target || this;\r\n    var queue = this._listeners && this._listeners[name];\r\n    var result;\r\n    var parentResult;\r\n    if (queue) {\r\n      for (var i = queue.length; i--; ) {\r\n        result = queue[i].call(target, target, extraArg);\r\n        if (result === false) return result;\r\n      }\r\n    }\r\n    if (this.parent) {\r\n      return this.parent.trigger(name, target, extraArg);\r\n    }\r\n    return true;\r\n  },\r\n\r\n  // Reset UI\r\n  reset: function () {\r\n    // Field case: just emit a reset event for UI\r\n    if ('ParsleyForm' !== this.__class__) {\r\n      this._resetUI();\r\n      return this._trigger('reset');\r\n    }\r\n\r\n    // Form case: emit a reset event for each field\r\n    for (var i = 0; i < this.fields.length; i++)\r\n      this.fields[i].reset();\r\n\r\n    this._trigger('reset');\r\n  },\r\n\r\n  // Destroy Parsley instance (+ UI)\r\n  destroy: function () {\r\n    // Field case: emit destroy event to clean UI and then destroy stored instance\r\n    this._destroyUI();\r\n    if ('ParsleyForm' !== this.__class__) {\r\n      this.$element.removeData('Parsley');\r\n      this.$element.removeData('ParsleyFieldMultiple');\r\n      this._trigger('destroy');\r\n\r\n      return;\r\n    }\r\n\r\n    // Form case: destroy all its fields and then destroy stored instance\r\n    for (var i = 0; i < this.fields.length; i++)\r\n      this.fields[i].destroy();\r\n\r\n    this.$element.removeData('Parsley');\r\n    this._trigger('destroy');\r\n  },\r\n\r\n  asyncIsValid: function (group, force) {\r\n    ParsleyUtils.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\r\n    return this.whenValid({group, force});\r\n  },\r\n\r\n  _findRelated: function () {\r\n    return this.options.multiple ?\r\n      this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\r\n    : this.$element;\r\n  }\r\n};\r\n\r\nexport default ParsleyAbstract;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar requirementConverters = {\r\n  string: function(string) {\r\n    return string;\r\n  },\r\n  integer: function(string) {\r\n    if (isNaN(string))\r\n      throw 'Requirement is not an integer: \"' + string + '\"';\r\n    return parseInt(string, 10);\r\n  },\r\n  number: function(string) {\r\n    if (isNaN(string))\r\n      throw 'Requirement is not a number: \"' + string + '\"';\r\n    return parseFloat(string);\r\n  },\r\n  reference: function(string) { // Unused for now\r\n    var result = $(string);\r\n    if (result.length === 0)\r\n      throw 'No such reference: \"' + string + '\"';\r\n    return result;\r\n  },\r\n  boolean: function(string) {\r\n    return string !== 'false';\r\n  },\r\n  object: function(string) {\r\n    return ParsleyUtils.deserializeValue(string);\r\n  },\r\n  regexp: function(regexp) {\r\n    var flags = '';\r\n\r\n    // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\r\n    if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\r\n      // Replace the regexp literal string with the first match group: ([gimy]*)\r\n      // If no flag is present, this will be a blank string\r\n      flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\r\n      // Again, replace the regexp literal string with the first match group:\r\n      // everything excluding the opening and closing slashes and the flags\r\n      regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\r\n    } else {\r\n      // Anchor regexp:\r\n      regexp = '^' + regexp + '$';\r\n    }\r\n    return new RegExp(regexp, flags);\r\n  }\r\n};\r\n\r\nvar convertArrayRequirement = function(string, length) {\r\n  var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\r\n  if (!m)\r\n    throw 'Requirement is not an array: \"' + string + '\"';\r\n  var values = m[1].split(',').map(ParsleyUtils.trimString);\r\n  if (values.length !== length)\r\n    throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\r\n  return values;\r\n};\r\n\r\nvar convertRequirement = function(requirementType, string) {\r\n  var converter = requirementConverters[requirementType || 'string'];\r\n  if (!converter)\r\n    throw 'Unknown requirement specification: \"' + requirementType + '\"';\r\n  return converter(string);\r\n};\r\n\r\nvar convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\r\n  var main = null;\r\n  var extra = {};\r\n  for (var key in requirementSpec) {\r\n    if (key) {\r\n      var value = extraOptionReader(key);\r\n      if ('string' === typeof value)\r\n        value = convertRequirement(requirementSpec[key], value);\r\n      extra[key] = value;\r\n    } else {\r\n      main = convertRequirement(requirementSpec[key], string);\r\n    }\r\n  }\r\n  return [main, extra];\r\n};\r\n\r\n// A Validator needs to implement the methods `validate` and `parseRequirements`\r\n\r\nvar ParsleyValidator = function(spec) {\r\n  $.extend(true, this, spec);\r\n};\r\n\r\nParsleyValidator.prototype = {\r\n  // Returns `true` iff the given `value` is valid according the given requirements.\r\n  validate: function(value, requirementFirstArg) {\r\n    if (this.fn) { // Legacy style validator\r\n\r\n      if (arguments.length > 3)  // If more args then value, requirement, instance...\r\n        requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\r\n      return this.fn.call(this, value, requirementFirstArg);\r\n    }\r\n\r\n    if ($.isArray(value)) {\r\n      if (!this.validateMultiple)\r\n        throw 'Validator `' + this.name + '` does not handle multiple values';\r\n      return this.validateMultiple(...arguments);\r\n    } else {\r\n      if (this.validateNumber) {\r\n        if (isNaN(value))\r\n          return false;\r\n        arguments[0] = parseFloat(arguments[0]);\r\n        return this.validateNumber(...arguments);\r\n      }\r\n      if (this.validateString) {\r\n        return this.validateString(...arguments);\r\n      }\r\n      throw 'Validator `' + this.name + '` only handles multiple values';\r\n    }\r\n  },\r\n\r\n  // Parses `requirements` into an array of arguments,\r\n  // according to `this.requirementType`\r\n  parseRequirements: function(requirements, extraOptionReader) {\r\n    if ('string' !== typeof requirements) {\r\n      // Assume requirement already parsed\r\n      // but make sure we return an array\r\n      return $.isArray(requirements) ? requirements : [requirements];\r\n    }\r\n    var type = this.requirementType;\r\n    if ($.isArray(type)) {\r\n      var values = convertArrayRequirement(requirements, type.length);\r\n      for (var i = 0; i < values.length; i++)\r\n        values[i] = convertRequirement(type[i], values[i]);\r\n      return values;\r\n    } else if ($.isPlainObject(type)) {\r\n      return convertExtraOptionRequirement(type, requirements, extraOptionReader);\r\n    } else {\r\n      return [convertRequirement(type, requirements)];\r\n    }\r\n  },\r\n  // Defaults:\r\n  requirementType: 'string',\r\n\r\n  priority: 2\r\n\r\n};\r\n\r\nexport default ParsleyValidator;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\nimport ParsleyDefaults from './defaults';\r\nimport ParsleyValidator from './validator';\r\n\r\nvar ParsleyValidatorRegistry = function (validators, catalog) {\r\n  this.__class__ = 'ParsleyValidatorRegistry';\r\n\r\n  // Default Parsley locale is en\r\n  this.locale = 'en';\r\n\r\n  this.init(validators || {}, catalog || {});\r\n};\r\n\r\nvar typeRegexes =  {\r\n  email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\r\n\r\n  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\r\n  number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\r\n\r\n  integer: /^-?\\d+$/,\r\n\r\n  digits: /^\\d+$/,\r\n\r\n  alphanum: /^\\w+$/i,\r\n\r\n  url: new RegExp(\r\n      \"^\" +\r\n        // protocol identifier\r\n        \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\r\n        // user:pass authentication\r\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n        \"(?:\" +\r\n          // IP address exclusion\r\n          // private & local networks\r\n          // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\r\n          // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n          // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n          // IP address dotted notation octets\r\n          // excludes loopback network 0.0.0.0\r\n          // excludes reserved space >= 224.0.0.0\r\n          // excludes network & broacast addresses\r\n          // (first & last IP address of each class)\r\n          \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n          \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n        \"|\" +\r\n          // host name\r\n          \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n          // domain name\r\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n          // TLD identifier\r\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n        \")\" +\r\n        // port number\r\n        \"(?::\\\\d{2,5})?\" +\r\n        // resource path\r\n        \"(?:/\\\\S*)?\" +\r\n      \"$\", 'i'\r\n    )\r\n};\r\ntypeRegexes.range = typeRegexes.number;\r\n\r\n// See http://stackoverflow.com/a/10454560/8279\r\nvar decimalPlaces = num => {\r\n  var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n  if (!match) { return 0; }\r\n  return Math.max(\r\n       0,\r\n       // Number of digits right of decimal point.\r\n       (match[1] ? match[1].length : 0) -\r\n       // Adjust for scientific notation.\r\n       (match[2] ? +match[2] : 0));\r\n};\r\n\r\nParsleyValidatorRegistry.prototype = {\r\n  init: function (validators, catalog) {\r\n    this.catalog = catalog;\r\n    // Copy prototype's validators:\r\n    this.validators = $.extend({}, this.validators);\r\n\r\n    for (var name in validators)\r\n      this.addValidator(name, validators[name].fn, validators[name].priority);\r\n\r\n    window.Parsley.trigger('parsley:validator:init');\r\n  },\r\n\r\n  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\r\n  setLocale: function (locale) {\r\n    if ('undefined' === typeof this.catalog[locale])\r\n      throw new Error(locale + ' is not available in the catalog');\r\n\r\n    this.locale = locale;\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\r\n  addCatalog: function (locale, messages, set) {\r\n    if ('object' === typeof messages)\r\n      this.catalog[locale] = messages;\r\n\r\n    if (true === set)\r\n      return this.setLocale(locale);\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add a specific message for a given constraint in a given locale\r\n  addMessage: function (locale, name, message) {\r\n    if ('undefined' === typeof this.catalog[locale])\r\n      this.catalog[locale] = {};\r\n\r\n    this.catalog[locale][name] = message;\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add messages for a given locale\r\n  addMessages: function (locale, nameMessageObject) {\r\n    for (var name in nameMessageObject)\r\n      this.addMessage(locale, name, nameMessageObject[name]);\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add a new validator\r\n  //\r\n  //    addValidator('custom', {\r\n  //        requirementType: ['integer', 'integer'],\r\n  //        validateString: function(value, from, to) {},\r\n  //        priority: 22,\r\n  //        messages: {\r\n  //          en: \"Hey, that's no good\",\r\n  //          fr: \"Aye aye, pas bon du tout\",\r\n  //        }\r\n  //    })\r\n  //\r\n  // Old API was addValidator(name, function, priority)\r\n  //\r\n  addValidator: function (name, arg1, arg2) {\r\n    if (this.validators[name])\r\n      ParsleyUtils.warn('Validator \"' + name + '\" is already defined.');\r\n    else if (ParsleyDefaults.hasOwnProperty(name)) {\r\n      ParsleyUtils.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\r\n      return;\r\n    }\r\n    return this._setValidator(...arguments);\r\n  },\r\n\r\n  updateValidator: function (name, arg1, arg2) {\r\n    if (!this.validators[name]) {\r\n      ParsleyUtils.warn('Validator \"' + name + '\" is not already defined.');\r\n      return this.addValidator(...arguments);\r\n    }\r\n    return this._setValidator(...arguments);\r\n  },\r\n\r\n  removeValidator: function (name) {\r\n    if (!this.validators[name])\r\n      ParsleyUtils.warn('Validator \"' + name + '\" is not defined.');\r\n\r\n    delete this.validators[name];\r\n\r\n    return this;\r\n  },\r\n\r\n  _setValidator: function (name, validator, priority) {\r\n    if ('object' !== typeof validator) {\r\n      // Old style validator, with `fn` and `priority`\r\n      validator = {\r\n        fn: validator,\r\n        priority: priority\r\n      };\r\n    }\r\n    if (!validator.validate) {\r\n      validator = new ParsleyValidator(validator);\r\n    }\r\n    this.validators[name] = validator;\r\n\r\n    for (var locale in validator.messages || {})\r\n      this.addMessage(locale, name, validator.messages[locale]);\r\n\r\n    return this;\r\n  },\r\n\r\n  getErrorMessage: function (constraint) {\r\n    var message;\r\n\r\n    // Type constraints are a bit different, we have to match their requirements too to find right error message\r\n    if ('type' === constraint.name) {\r\n      var typeMessages = this.catalog[this.locale][constraint.name] || {};\r\n      message = typeMessages[constraint.requirements];\r\n    } else\r\n      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\r\n\r\n    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\r\n  },\r\n\r\n  // Kind of light `sprintf()` implementation\r\n  formatMessage: function (string, parameters) {\r\n    if ('object' === typeof parameters) {\r\n      for (var i in parameters)\r\n        string = this.formatMessage(string, parameters[i]);\r\n\r\n      return string;\r\n    }\r\n\r\n    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\r\n  },\r\n\r\n  // Here is the Parsley default validators list.\r\n  // A validator is an object with the following key values:\r\n  //  - priority: an integer\r\n  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\r\n  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\r\n  // Alternatively, a validator can be a function that returns such an object\r\n  //\r\n  validators: {\r\n    notblank: {\r\n      validateString: function(value) {\r\n        return /\\S/.test(value);\r\n      },\r\n      priority: 2\r\n    },\r\n    required: {\r\n      validateMultiple: function(values) {\r\n        return values.length > 0;\r\n      },\r\n      validateString: function(value) {\r\n        return /\\S/.test(value);\r\n      },\r\n      priority: 512\r\n    },\r\n    type: {\r\n      validateString: function(value, type, {step = '1', base = 0} = {}) {\r\n        var regex = typeRegexes[type];\r\n        if (!regex) {\r\n          throw new Error('validator type `' + type + '` is not supported');\r\n        }\r\n        if (!regex.test(value))\r\n          return false;\r\n        if ('number' === type) {\r\n          if (!/^any$/i.test(step || '')) {\r\n            var nb = Number(value);\r\n            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\r\n            if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\r\n              return false;\r\n            // Be careful of rounding errors by using integers.\r\n            var toInt = f => Math.round(f * Math.pow(10, decimals));\r\n            if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\r\n              return false;\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n      requirementType: {\r\n        '': 'string',\r\n        step: 'string',\r\n        base: 'number'\r\n      },\r\n      priority: 256\r\n    },\r\n    pattern: {\r\n      validateString: function(value, regexp) {\r\n        return regexp.test(value);\r\n      },\r\n      requirementType: 'regexp',\r\n      priority: 64\r\n    },\r\n    minlength: {\r\n      validateString: function (value, requirement) {\r\n        return value.length >= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    maxlength: {\r\n      validateString: function (value, requirement) {\r\n        return value.length <= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    length: {\r\n      validateString: function (value, min, max) {\r\n        return value.length >= min && value.length <= max;\r\n      },\r\n      requirementType: ['integer', 'integer'],\r\n      priority: 30\r\n    },\r\n    mincheck: {\r\n      validateMultiple: function (values, requirement) {\r\n        return values.length >= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    maxcheck: {\r\n      validateMultiple: function (values, requirement) {\r\n        return values.length <= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    check: {\r\n      validateMultiple: function (values, min, max) {\r\n        return values.length >= min && values.length <= max;\r\n      },\r\n      requirementType: ['integer', 'integer'],\r\n      priority: 30\r\n    },\r\n    min: {\r\n      validateNumber: function (value, requirement) {\r\n        return value >= requirement;\r\n      },\r\n      requirementType: 'number',\r\n      priority: 30\r\n    },\r\n    max: {\r\n      validateNumber: function (value, requirement) {\r\n        return value <= requirement;\r\n      },\r\n      requirementType: 'number',\r\n      priority: 30\r\n    },\r\n    range: {\r\n      validateNumber: function (value, min, max) {\r\n        return value >= min && value <= max;\r\n      },\r\n      requirementType: ['number', 'number'],\r\n      priority: 30\r\n    },\r\n    equalto: {\r\n      validateString: function (value, refOrValue) {\r\n        var $reference = $(refOrValue);\r\n        if ($reference.length)\r\n          return value === $reference.val();\r\n        else\r\n          return value === refOrValue;\r\n      },\r\n      priority: 256\r\n    }\r\n  }\r\n};\r\n\r\nexport default ParsleyValidatorRegistry;\r\n","import $ from 'jquery';\nimport qtip from 'qtip2'\nimport ParsleyUtils from './utils';\n\nvar ParsleyUI = {};\n\n/*custom*/\nvar qtipSetting = {\n    show : {\n        solo : true,\n        hide : 'unfocus'\n    },\n    position : {\n        my : 'left center',\n        at : 'right center'\n    }\n};\n\nvar diffResults = function (newResult, oldResult, deep) {\n  var added = [];\n  var kept = [];\n\n  for (var i = 0; i < newResult.length; i++) {\n    var found = false;\n\n    for (var j = 0; j < oldResult.length; j++)\n      if (newResult[i].assert.name === oldResult[j].assert.name) {\n        found = true;\n        break;\n      }\n\n    if (found)\n      kept.push(newResult[i]);\n    else\n      added.push(newResult[i]);\n  }\n\n  return {\n    kept: kept,\n    added: added,\n    removed: !deep ? diffResults(oldResult, newResult, true).added : []\n  };\n};\n\nParsleyUI.Form = {\n\n  _actualizeTriggers: function () {\n    this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\n    this.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', evt => { this.onSubmitButton(evt); });\n\n    // UI could be disabled\n    if (false === this.options.uiEnabled)\n      return;\n\n    this.$element.attr('novalidate', '');\n  },\n\n  focus: function () {\n    this._focusedField = null;\n\n    if (true === this.validationResult || 'none' === this.options.focus)\n      return null;\n\n    for (var i = 0; i < this.fields.length; i++) {\n      var field = this.fields[i];\n      if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n        this._focusedField = field.$element;\n        if ('first' === this.options.focus)\n          break;\n      }\n    }\n\n    if (null === this._focusedField)\n      return null;\n\n    return this._focusedField.focus();\n  },\n\n  _destroyUI: function () {\n    // Reset all event listeners\n    this.$element.off('.Parsley');\n  }\n\n};\n\nParsleyUI.Field = {\n\n  _reflowUI: function () {\n    this._buildUI();\n\n    // If this field doesn't have an active UI don't bother doing something\n    if (!this._ui)\n      return;\n\n    // Diff between two validation results\n    var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n    // Then store current validation result for next reflow\n    this._ui.lastValidationResult = this.validationResult;\n\n    // Handle valid / invalid / none field class\n    this._manageStatusClass();\n\n    // Add, remove, updated errors messages\n    this._manageErrorsMessages(diff);\n\n    // Triggers impl\n    this._actualizeTriggers();\n\n    // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n    if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\n      this._failedOnce = true;\n      this._actualizeTriggers();\n    }\n  },\n\n  // Returns an array of field's error message(s)\n  getErrorsMessages: function () {\n    // No error message, field is valid\n    if (true === this.validationResult)\n      return [];\n\n    var messages = [];\n\n    for (var i = 0; i < this.validationResult.length; i++)\n      messages.push(this.validationResult[i].errorMessage ||\n       this._getErrorMessage(this.validationResult[i].assert));\n\n    return messages;\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  addError: function (name, {message, assert, updateClass = true} = {}) {\n    this._buildUI();\n    this._addError(name, {message, assert});\n\n    if (updateClass)\n      this._errorClass();\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  updateError: function (name, {message, assert, updateClass = true} = {}) {\n    this._buildUI();\n    this._updateError(name, {message, assert});\n\n    if (updateClass)\n      this._errorClass();\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  removeError: function (name, {updateClass = true} = {}) {\n    this._buildUI();\n    this._removeError(name);\n\n    // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n    // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n    if (updateClass)\n      this._manageStatusClass();\n  },\n\n  _manageStatusClass: function () {\n    if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\n      this._successClass();\n    else if (this.validationResult.length > 0)\n      this._errorClass();\n    else\n      this._resetClass();\n  },\n\n  _manageErrorsMessages: function (diff) {\n    if ('undefined' !== typeof this.options.errorsMessagesDisabled)\n      return;\n\n    // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n    if ('undefined' !== typeof this.options.errorMessage) {\n      if ((diff.added.length || diff.kept.length)) {\n        this._insertErrorWrapper();\n\n        if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n          // this._ui.$errorsWrapper\n          //   .append(\n          //     $(this.options.errorTemplate)\n          //     .addClass('parsley-custom-error-message')\n          //   );\n          this.$element\n            .attr('title', this.options.errorMessage)\n            .qtip(qtipSetting);\n\n        return this._ui.$errorsWrapper\n          .addClass('filled')\n          .find('.parsley-custom-error-message')\n          .html(this.options.errorMessage);\n      }\n\n      // remove title\n      var qtapi = this.$element.qtip('api');\n      if (qtapi) {\n        qtapi.destroy().removeAttr('title');\n      }\n\n      return this._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-custom-error-message')\n        .remove();\n    }\n\n    // Show, hide, update failing constraints messages\n    for (var i = 0; i < diff.removed.length; i++)\n      this._removeError(diff.removed[i].assert.name);\n\n    for (i = 0; i < diff.added.length; i++)\n      this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\n\n    for (i = 0; i < diff.kept.length; i++)\n      this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\n  },\n\n\n  _addError: function (name, {message, assert}) {\n    this._insertErrorWrapper();\n    // this._ui.$errorsWrapper\n    //   .addClass('filled')\n    //   .append(\n    //     $(this.options.errorTemplate)\n    //     .addClass('parsley-' + name)\n    //     .html(message || this._getErrorMessage(assert))\n    //   );\n     // use qtip instead of errorTemplate\n    this.$element\n      .attr('title', (message || this._getErrorMessage(assert)))\n      .qtip(qtipSetting);\n  },\n\n  _updateError: function (name, {message, assert}) {\n    this._ui.$errorsWrapper\n      .addClass('filled')\n      .find('.parsley-' + name)\n      .html(message || this._getErrorMessage(assert));\n  },\n\n  _removeError: function (name) {\n    this._ui.$errorsWrapper\n      .removeClass('filled')\n      .find('.parsley-' + name)\n      .remove();\n\n    // remove title\n      var qtapi = this.$element.qtip('api');\n      if (qtapi) {\n        qtapi.destroy().removeAttr('title');\n      }\n  },\n\n  _getErrorMessage: function (constraint) {\n    var customConstraintErrorMessage = constraint.name + 'Message';\n\n    if ('undefined' !== typeof this.options[customConstraintErrorMessage])\n      return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n    return window.Parsley.getErrorMessage(constraint);\n  },\n\n  _buildUI: function () {\n    // UI could be already built or disabled\n    if (this._ui || false === this.options.uiEnabled)\n      return;\n\n    var _ui = {};\n\n    // Give field its Parsley id in DOM\n    this.$element.attr(this.options.namespace + 'id', this.__id__);\n\n    /** Generate important UI elements and store them in this **/\n    // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n    _ui.$errorClassHandler = this._manageClassHandler();\n\n    // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n    _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\n    _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n    // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n    _ui.lastValidationResult = [];\n    _ui.validationInformationVisible = false;\n\n    // Store it in this for later\n    this._ui = _ui;\n  },\n\n  // Determine which element will have `parsley-error` and `parsley-success` classes\n  _manageClassHandler: function () {\n    // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n    if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\n      return $(this.options.classHandler);\n\n    // Class handled could also be determined by function given in Parsley options\n    var $handler = this.options.classHandler.call(this, this);\n\n    // If this function returned a valid existing DOM element, go for it\n    if ('undefined' !== typeof $handler && $handler.length)\n      return $handler;\n\n    // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\n    if (!this.options.multiple || this.$element.is('select'))\n      return this.$element;\n\n    // But if multiple element (radio, checkbox), that would be their parent\n    return this.$element.parent();\n  },\n\n  _insertErrorWrapper: function () {\n    var $errorsContainer;\n\n    // Nothing to do if already inserted\n    if (0 !== this._ui.$errorsWrapper.parent().length)\n      return this._ui.$errorsWrapper.parent();\n\n    if ('string' === typeof this.options.errorsContainer) {\n      if ($(this.options.errorsContainer).length)\n        return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);\n      else\n        ParsleyUtils.warn('The errors container `' + this.options.errorsContainer + '` does not exist in DOM');\n    } else if ('function' === typeof this.options.errorsContainer)\n      $errorsContainer = this.options.errorsContainer.call(this, this);\n\n    if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\n      return $errorsContainer.append(this._ui.$errorsWrapper);\n\n    var $from = this.$element;\n    if (this.options.multiple)\n      $from = $from.parent();\n    return $from.after(this._ui.$errorsWrapper);\n  },\n\n  _actualizeTriggers: function () {\n    var $toBind = this._findRelated();\n    var trigger;\n\n    // Remove Parsley events already bound on this field\n    $toBind.off('.Parsley');\n    if (this._failedOnce)\n      $toBind.on(ParsleyUtils.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\n        this.validate();\n      });\n    else if (trigger = ParsleyUtils.namespaceEvents(this.options.trigger, 'Parsley')) {\n      $toBind.on(trigger, event => {\n        this._eventValidate(event);\n      });\n    }\n  },\n\n  _eventValidate: function (event) {\n    // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n    // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n    // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n    if (/key|input/.test(event.type))\n      if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\n        return;\n\n    this.validate();\n  },\n\n  _resetUI: function () {\n    // Reset all event listeners\n    this._failedOnce = false;\n    this._actualizeTriggers();\n\n    // Nothing to do if UI never initialized for this field\n    if ('undefined' === typeof this._ui)\n      return;\n\n    // Reset all errors' li\n    this._ui.$errorsWrapper\n      .removeClass('filled')\n      .children()\n      .remove();\n\n    // Reset validation class\n    this._resetClass();\n\n    // Reset validation flags and last validation result\n    this._ui.lastValidationResult = [];\n    this._ui.validationInformationVisible = false;\n  },\n\n  _destroyUI: function () {\n    this._resetUI();\n\n    if ('undefined' !== typeof this._ui)\n      this._ui.$errorsWrapper.remove();\n\n    delete this._ui;\n  },\n\n  _successClass: function () {\n    this._ui.validationInformationVisible = true;\n    this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n  },\n  _errorClass: function () {\n    this._ui.validationInformationVisible = true;\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n  },\n  _resetClass: function () {\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n  }\n};\n\nexport default ParsleyUI;\n","import $ from 'jquery';\r\nimport ParsleyAbstract from './abstract';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar ParsleyForm = function (element, domOptions, options) {\r\n  this.__class__ = 'ParsleyForm';\r\n\r\n  this.$element = $(element);\r\n  this.domOptions = domOptions;\r\n  this.options = options;\r\n  this.parent = window.Parsley;\r\n\r\n  this.fields = [];\r\n  this.validationResult = null;\r\n};\r\n\r\nvar statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\nParsleyForm.prototype = {\r\n  onSubmitValidate: function (event) {\r\n    // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\r\n    if (true === event.parsley)\r\n      return;\r\n\r\n    // If we didn't come here through a submit button, use the first one in the form\r\n    var $submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\r\n    this._$submitSource = null;\r\n    this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\r\n    if ($submitSource.is('[formnovalidate]'))\r\n      return;\r\n\r\n    var promise = this.whenValidate({event});\r\n\r\n    if ('resolved' === promise.state() && false !== this._trigger('submit')) {\r\n      // All good, let event go through. We make this distinction because browsers\r\n      // differ in their handling of `submit` being called from inside a submit event [#1047]\r\n    } else {\r\n      // Rejected or pending: cancel this submit\r\n      event.stopImmediatePropagation();\r\n      event.preventDefault();\r\n      if ('pending' === promise.state())\r\n        promise.done(() => { this._submit($submitSource); });\r\n    }\r\n  },\r\n\r\n  onSubmitButton: function(event) {\r\n    this._$submitSource = $(event.currentTarget);\r\n  },\r\n  // internal\r\n  // _submit submits the form, this time without going through the validations.\r\n  // Care must be taken to \"fake\" the actual submit button being clicked.\r\n  _submit: function ($submitSource) {\r\n    if (false === this._trigger('submit'))\r\n      return;\r\n    // Add submit button's data\r\n    if ($submitSource) {\r\n      var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\r\n      if (0 === $synthetic.length)\r\n        $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\r\n      $synthetic.attr({\r\n        name: $submitSource.attr('name'),\r\n        value: $submitSource.attr('value')\r\n      });\r\n    }\r\n\r\n    this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\r\n  },\r\n\r\n  // Performs validation on fields while triggering events.\r\n  // @returns `true` if all validations succeeds, `false`\r\n  // if a failure is immediately detected, or `null`\r\n  // if dependant on a promise.\r\n  // Consider using `whenValidate` instead.\r\n  validate: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\r\n      var [group, force, event] = arguments;\r\n      options = {group, force, event};\r\n    }\r\n    return statusMapping[ this.whenValidate(options).state() ];\r\n  },\r\n\r\n  whenValidate: function ({group, force, event} = {}) {\r\n    this.submitEvent = event;\r\n    if (event) {\r\n      this.submitEvent = $.extend({}, event, {preventDefault: () => {\r\n        ParsleyUtils.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\r\n        this.validationResult = false;\r\n      }});\r\n    }\r\n    this.validationResult = true;\r\n\r\n    // fire validate event to eventually modify things before every validation\r\n    this._trigger('validate');\r\n\r\n    // Refresh form DOM options and form's fields that could have changed\r\n    this._refreshFields();\r\n\r\n    var promises = this._withoutReactualizingFormOptions(() => {\r\n      return $.map(this.fields, field => field.whenValidate({force, group}));\r\n    });\r\n\r\n    return ParsleyUtils.all(promises)\r\n      .done(  () => { this._trigger('success'); })\r\n      .fail(  () => {\r\n        this.validationResult = false;\r\n        this.focus();\r\n        this._trigger('error');\r\n      })\r\n      .always(() => { this._trigger('validated'); })\r\n      .pipe(...this._pipeAccordingToValidationResult());\r\n  },\r\n\r\n  // Iterate over refreshed fields, and stop on first failure.\r\n  // Returns `true` if all fields are valid, `false` if a failure is detected\r\n  // or `null` if the result depends on an unresolved promise.\r\n  // Prefer using `whenValid` instead.\r\n  isValid: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\r\n      var [group, force] = arguments;\r\n      options = {group, force};\r\n    }\r\n    return statusMapping[ this.whenValid(options).state() ];\r\n  },\r\n\r\n  // Iterate over refreshed fields and validate them.\r\n  // Returns a promise.\r\n  // A validation that immediately fails will interrupt the validations.\r\n  whenValid: function ({group, force} = {}) {\r\n    this._refreshFields();\r\n\r\n    var promises = this._withoutReactualizingFormOptions(() => {\r\n      return $.map(this.fields, field => field.whenValid({group, force}));\r\n    });\r\n    return ParsleyUtils.all(promises);\r\n  },\r\n\r\n  _refreshFields: function () {\r\n    return this.actualizeOptions()._bindFields();\r\n  },\r\n\r\n  _bindFields: function () {\r\n    var oldFields = this.fields;\r\n\r\n    this.fields = [];\r\n    this.fieldsMappedById = {};\r\n\r\n    this._withoutReactualizingFormOptions(() => {\r\n      this.$element\r\n      .find(this.options.inputs)\r\n      .not(this.options.excluded)\r\n      .each((_, element) => {\r\n        var fieldInstance = new window.Parsley.Factory(element, {}, this);\r\n\r\n        // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\r\n        if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\r\n          if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\r\n            this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\r\n            this.fields.push(fieldInstance);\r\n          }\r\n      });\r\n\r\n      $.each(ParsleyUtils.difference(oldFields, this.fields), (_, field) => {\r\n        field._trigger('reset');\r\n      });\r\n    });\r\n    return this;\r\n  },\r\n\r\n  // Internal only.\r\n  // Looping on a form's fields to do validation or similar\r\n  // will trigger reactualizing options on all of them, which\r\n  // in turn will reactualize the form's options.\r\n  // To avoid calling actualizeOptions so many times on the form\r\n  // for nothing, _withoutReactualizingFormOptions temporarily disables\r\n  // the method actualizeOptions on this form while `fn` is called.\r\n  _withoutReactualizingFormOptions: function (fn) {\r\n    var oldActualizeOptions = this.actualizeOptions;\r\n    this.actualizeOptions = function () { return this; };\r\n    var result = fn();\r\n    this.actualizeOptions = oldActualizeOptions;\r\n    return result;\r\n  },\r\n\r\n  // Internal only.\r\n  // Shortcut to trigger an event\r\n  // Returns true iff event is not interrupted and default not prevented.\r\n  _trigger: function (eventName) {\r\n    return this.trigger('form:' + eventName);\r\n  }\r\n\r\n};\r\n\r\nexport default ParsleyForm;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from '../utils';\r\nimport ParsleyValidator from '../validator';\r\n\r\n\r\nvar ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\r\n  if (!/ParsleyField/.test(parsleyField.__class__))\r\n    throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\r\n\r\n  var validatorSpec = window.Parsley._validatorRegistry.validators[name];\r\n  var validator = new ParsleyValidator(validatorSpec);\r\n\r\n  $.extend(this, {\r\n    validator: validator,\r\n    name: name,\r\n    requirements: requirements,\r\n    priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\r\n    isDomConstraint: true === isDomConstraint\r\n  });\r\n  this._parseRequirements(parsleyField.options);\r\n};\r\n\r\nvar capitalize = function(str) {\r\n  var cap = str[0].toUpperCase();\r\n  return cap + str.slice(1);\r\n};\r\n\r\nConstraintFactory.prototype = {\r\n  validate: function(value, instance) {\r\n    return this.validator.validate(value, ...this.requirementList, instance);\r\n  },\r\n\r\n  _parseRequirements: function(options) {\r\n    this.requirementList = this.validator.parseRequirements(this.requirements,\r\n      key => options[this.name + capitalize(key)]\r\n    );\r\n  }\r\n};\r\n\r\nexport default ConstraintFactory;\r\n\r\n","import $ from 'jquery';\r\nimport ConstraintFactory from './factory/constraint';\r\nimport ParsleyUI from './ui';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\r\n  this.__class__ = 'ParsleyField';\r\n\r\n  this.$element = $(field);\r\n\r\n  // Set parent if we have one\r\n  if ('undefined' !== typeof parsleyFormInstance) {\r\n    this.parent = parsleyFormInstance;\r\n  }\r\n\r\n  this.options = options;\r\n  this.domOptions = domOptions;\r\n\r\n  // Initialize some properties\r\n  this.constraints = [];\r\n  this.constraintsByName = {};\r\n  this.validationResult = true;\r\n\r\n  // Bind constraints\r\n  this._bindConstraints();\r\n};\r\n\r\nvar statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\nParsleyField.prototype = {\r\n  // # Public API\r\n  // Validate field and trigger some events for mainly `ParsleyUI`\r\n  // @returns `true`, an array of the validators that failed, or\r\n  // `null` if validation is not finished. Prefer using whenValidate\r\n  validate: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\r\n      options = {options};\r\n    }\r\n    var promise = this.whenValidate(options);\r\n    if (!promise)  // If excluded with `group` option\r\n      return true;\r\n    switch (promise.state()) {\r\n      case 'pending': return null;\r\n      case 'resolved': return true;\r\n      case 'rejected': return this.validationResult;\r\n    }\r\n  },\r\n\r\n  // Validate field and trigger some events for mainly `ParsleyUI`\r\n  // @returns a promise that succeeds only when all validations do\r\n  // or `undefined` if field is not in the given `group`.\r\n  whenValidate: function ({force, group} =  {}) {\r\n    // do not validate a field if not the same as given validation group\r\n    this.refreshConstraints();\r\n    if (group && !this._isInGroup(group))\r\n      return;\r\n\r\n    this.value = this.getValue();\r\n\r\n    // Field Validate event. `this.value` could be altered for custom needs\r\n    this._trigger('validate');\r\n\r\n    return this.whenValid({force, value: this.value, _refreshed: true})\r\n      .always(() => { this._reflowUI(); })\r\n      .done(() =>   { this._trigger('success'); })\r\n      .fail(() =>   { this._trigger('error'); })\r\n      .always(() => { this._trigger('validated'); })\r\n      .pipe(...this._pipeAccordingToValidationResult());\r\n  },\r\n\r\n  hasConstraints: function () {\r\n    return 0 !== this.constraints.length;\r\n  },\r\n\r\n  // An empty optional field does not need validation\r\n  needsValidation: function (value) {\r\n    if ('undefined' === typeof value)\r\n      value = this.getValue();\r\n\r\n    // If a field is empty and not required, it is valid\r\n    // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\r\n    if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\r\n      return false;\r\n\r\n    return true;\r\n  },\r\n\r\n  _isInGroup: function (group) {\r\n    if ($.isArray(this.options.group))\r\n      return -1 !== $.inArray(group, this.options.group);\r\n    return this.options.group === group;\r\n  },\r\n\r\n  // Just validate field. Do not trigger any event.\r\n  // Returns `true` iff all constraints pass, `false` if there are failures,\r\n  // or `null` if the result can not be determined yet (depends on a promise)\r\n  // See also `whenValid`.\r\n  isValid: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\r\n      var [force, value] = arguments;\r\n      options = {force, value};\r\n    }\r\n    var promise = this.whenValid(options);\r\n    if (!promise) // Excluded via `group`\r\n      return true;\r\n    return statusMapping[promise.state()];\r\n  },\r\n\r\n  // Just validate field. Do not trigger any event.\r\n  // @returns a promise that succeeds only when all validations do\r\n  // or `undefined` if the field is not in the given `group`.\r\n  // The argument `force` will force validation of empty fields.\r\n  // If a `value` is given, it will be validated instead of the value of the input.\r\n  whenValid: function ({force = false, value, group, _refreshed} = {}) {\r\n    // Recompute options and rebind constraints to have latest changes\r\n    if (!_refreshed)\r\n      this.refreshConstraints();\r\n    // do not validate a field if not the same as given validation group\r\n    if (group && !this._isInGroup(group))\r\n      return;\r\n\r\n    this.validationResult = true;\r\n\r\n    // A field without constraint is valid\r\n    if (!this.hasConstraints())\r\n      return $.when();\r\n\r\n    // Value could be passed as argument, needed to add more power to 'field:validate'\r\n    if ('undefined' === typeof value || null === value)\r\n      value = this.getValue();\r\n\r\n    if (!this.needsValidation(value) && true !== force)\r\n      return $.when();\r\n\r\n    var groupedConstraints = this._getGroupedConstraints();\r\n    var promises = [];\r\n    $.each(groupedConstraints, (_, constraints) => {\r\n      // Process one group of constraints at a time, we validate the constraints\r\n      // and combine the promises together.\r\n      var promise = ParsleyUtils.all(\r\n        $.map(constraints, constraint => this._validateConstraint(value, constraint))\r\n      );\r\n      promises.push(promise);\r\n      if (promise.state() === 'rejected')\r\n        return false; // Interrupt processing if a group has already failed\r\n    });\r\n    return ParsleyUtils.all(promises);\r\n  },\r\n\r\n  // @returns a promise\r\n  _validateConstraint: function(value, constraint) {\r\n    var result = constraint.validate(value, this);\r\n    // Map false to a failed promise\r\n    if (false === result)\r\n      result = $.Deferred().reject();\r\n    // Make sure we return a promise and that we record failures\r\n    return ParsleyUtils.all([result]).fail(errorMessage => {\r\n      if (!(this.validationResult instanceof Array))\r\n        this.validationResult = [];\r\n      this.validationResult.push({\r\n        assert: constraint,\r\n        errorMessage: 'string' === typeof errorMessage && errorMessage\r\n      });\r\n    });\r\n  },\r\n\r\n  // @returns Parsley field computed value that could be overrided or configured in DOM\r\n  getValue: function () {\r\n    var value;\r\n\r\n    // Value could be overriden in DOM or with explicit options\r\n    if ('function' === typeof this.options.value)\r\n      value = this.options.value(this);\r\n    else if ('undefined' !== typeof this.options.value)\r\n      value = this.options.value;\r\n    else\r\n      value = this.$element.val();\r\n\r\n    // Handle wrong DOM or configurations\r\n    if ('undefined' === typeof value || null === value)\r\n      return '';\r\n\r\n    return this._handleWhitespace(value);\r\n  },\r\n\r\n  // Actualize options that could have change since previous validation\r\n  // Re-bind accordingly constraints (could be some new, removed or updated)\r\n  refreshConstraints: function () {\r\n    return this.actualizeOptions()._bindConstraints();\r\n  },\r\n\r\n  /**\r\n  * Add a new constraint to a field\r\n  *\r\n  * @param {String}   name\r\n  * @param {Mixed}    requirements      optional\r\n  * @param {Number}   priority          optional\r\n  * @param {Boolean}  isDomConstraint   optional\r\n  */\r\n  addConstraint: function (name, requirements, priority, isDomConstraint) {\r\n\r\n    if (window.Parsley._validatorRegistry.validators[name]) {\r\n      var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\r\n\r\n      // if constraint already exist, delete it and push new version\r\n      if ('undefined' !== this.constraintsByName[constraint.name])\r\n        this.removeConstraint(constraint.name);\r\n\r\n      this.constraints.push(constraint);\r\n      this.constraintsByName[constraint.name] = constraint;\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  // Remove a constraint\r\n  removeConstraint: function (name) {\r\n    for (var i = 0; i < this.constraints.length; i++)\r\n      if (name === this.constraints[i].name) {\r\n        this.constraints.splice(i, 1);\r\n        break;\r\n      }\r\n    delete this.constraintsByName[name];\r\n    return this;\r\n  },\r\n\r\n  // Update a constraint (Remove + re-add)\r\n  updateConstraint: function (name, parameters, priority) {\r\n    return this.removeConstraint(name)\r\n      .addConstraint(name, parameters, priority);\r\n  },\r\n\r\n  // # Internals\r\n\r\n  // Internal only.\r\n  // Bind constraints from config + options + DOM\r\n  _bindConstraints: function () {\r\n    var constraints = [];\r\n    var constraintsByName = {};\r\n\r\n    // clean all existing DOM constraints to only keep javascript user constraints\r\n    for (var i = 0; i < this.constraints.length; i++)\r\n      if (false === this.constraints[i].isDomConstraint) {\r\n        constraints.push(this.constraints[i]);\r\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\r\n      }\r\n\r\n    this.constraints = constraints;\r\n    this.constraintsByName = constraintsByName;\r\n\r\n    // then re-add Parsley DOM-API constraints\r\n    for (var name in this.options)\r\n      this.addConstraint(name, this.options[name], undefined, true);\r\n\r\n    // finally, bind special HTML5 constraints\r\n    return this._bindHtml5Constraints();\r\n  },\r\n\r\n  // Internal only.\r\n  // Bind specific HTML5 constraints to be HTML5 compliant\r\n  _bindHtml5Constraints: function () {\r\n    // html5 required\r\n    if (this.$element.hasClass('required') || this.$element.attr('required'))\r\n      this.addConstraint('required', true, undefined, true);\r\n\r\n    // html5 pattern\r\n    if ('string' === typeof this.$element.attr('pattern'))\r\n      this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\r\n\r\n    // range\r\n    if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\r\n      this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\r\n\r\n    // HTML5 min\r\n    else if ('undefined' !== typeof this.$element.attr('min'))\r\n      this.addConstraint('min', this.$element.attr('min'), undefined, true);\r\n\r\n    // HTML5 max\r\n    else if ('undefined' !== typeof this.$element.attr('max'))\r\n      this.addConstraint('max', this.$element.attr('max'), undefined, true);\r\n\r\n\r\n    // length\r\n    if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\r\n      this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\r\n\r\n    // HTML5 minlength\r\n    else if ('undefined' !== typeof this.$element.attr('minlength'))\r\n      this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\r\n\r\n    // HTML5 maxlength\r\n    else if ('undefined' !== typeof this.$element.attr('maxlength'))\r\n      this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\r\n\r\n\r\n    // html5 types\r\n    var type = this.$element.attr('type');\r\n\r\n    if ('undefined' === typeof type)\r\n      return this;\r\n\r\n    // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\r\n    if ('number' === type) {\r\n      return this.addConstraint('type', ['number', {\r\n        step: this.$element.attr('step'),\r\n        base: this.$element.attr('min') || this.$element.attr('value')\r\n      }], undefined, true);\r\n    // Regular other HTML5 supported types\r\n    } else if (/^(email|url|range)$/i.test(type)) {\r\n      return this.addConstraint('type', type, undefined, true);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  // Internal only.\r\n  // Field is required if have required constraint without `false` value\r\n  _isRequired: function () {\r\n    if ('undefined' === typeof this.constraintsByName.required)\r\n      return false;\r\n\r\n    return false !== this.constraintsByName.required.requirements;\r\n  },\r\n\r\n  // Internal only.\r\n  // Shortcut to trigger an event\r\n  _trigger: function (eventName) {\r\n    return this.trigger('field:' + eventName);\r\n  },\r\n\r\n  // Internal only\r\n  // Handles whitespace in a value\r\n  // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\r\n  // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\r\n  _handleWhitespace: function (value) {\r\n    if (true === this.options.trimValue)\r\n      ParsleyUtils.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\r\n\r\n    if ('squish' === this.options.whitespace)\r\n      value = value.replace(/\\s{2,}/g, ' ');\r\n\r\n    if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\r\n      value = ParsleyUtils.trimString(value);\r\n\r\n    return value;\r\n  },\r\n\r\n  // Internal only.\r\n  // Returns the constraints, grouped by descending priority.\r\n  // The result is thus an array of arrays of constraints.\r\n  _getGroupedConstraints: function () {\r\n    if (false === this.options.priorityEnabled)\r\n      return [this.constraints];\r\n\r\n    var groupedConstraints = [];\r\n    var index = {};\r\n\r\n    // Create array unique of priorities\r\n    for (var i = 0; i < this.constraints.length; i++) {\r\n      var p = this.constraints[i].priority;\r\n      if (!index[p])\r\n        groupedConstraints.push(index[p] = []);\r\n      index[p].push(this.constraints[i]);\r\n    }\r\n    // Sort them by priority DESC\r\n    groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\r\n\r\n    return groupedConstraints;\r\n  }\r\n\r\n};\r\n\r\nexport default ParsleyField;\r\n","import $ from 'jquery';\r\n\r\nvar ParsleyMultiple = function () {\r\n  this.__class__ = 'ParsleyFieldMultiple';\r\n};\r\n\r\nParsleyMultiple.prototype = {\r\n  // Add new `$element` sibling for multiple field\r\n  addElement: function ($element) {\r\n    this.$elements.push($element);\r\n\r\n    return this;\r\n  },\r\n\r\n  // See `ParsleyField.refreshConstraints()`\r\n  refreshConstraints: function () {\r\n    var fieldConstraints;\r\n\r\n    this.constraints = [];\r\n\r\n    // Select multiple special treatment\r\n    if (this.$element.is('select')) {\r\n      this.actualizeOptions()._bindConstraints();\r\n\r\n      return this;\r\n    }\r\n\r\n    // Gather all constraints for each input in the multiple group\r\n    for (var i = 0; i < this.$elements.length; i++) {\r\n\r\n      // Check if element have not been dynamically removed since last binding\r\n      if (!$('html').has(this.$elements[i]).length) {\r\n        this.$elements.splice(i, 1);\r\n        continue;\r\n      }\r\n\r\n      fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\r\n\r\n      for (var j = 0; j < fieldConstraints.length; j++)\r\n        this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  // See `ParsleyField.getValue()`\r\n  getValue: function () {\r\n    // Value could be overriden in DOM\r\n    if ('function' === typeof this.options.value)\r\n      return this.options.value(this);\r\n    else if ('undefined' !== typeof this.options.value)\r\n      return this.options.value;\r\n\r\n    // Radio input case\r\n    if (this.$element.is('input[type=radio]'))\r\n      return this._findRelated().filter(':checked').val() || '';\r\n\r\n    // checkbox input case\r\n    if (this.$element.is('input[type=checkbox]')) {\r\n      var values = [];\r\n\r\n      this._findRelated().filter(':checked').each(function () {\r\n        values.push($(this).val());\r\n      });\r\n\r\n      return values;\r\n    }\r\n\r\n    // Select multiple case\r\n    if (this.$element.is('select') && null === this.$element.val())\r\n      return [];\r\n\r\n    // Default case that should never happen\r\n    return this.$element.val();\r\n  },\r\n\r\n  _init: function () {\r\n    this.$elements = [this.$element];\r\n\r\n    return this;\r\n  }\r\n};\r\n\r\nexport default ParsleyMultiple;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\nimport ParsleyAbstract from './abstract';\r\nimport ParsleyForm from './form';\r\nimport ParsleyField from './field';\r\nimport ParsleyMultiple from './multiple';\r\n\r\nvar ParsleyFactory = function (element, options, parsleyFormInstance) {\r\n  this.$element = $(element);\r\n\r\n  // If the element has already been bound, returns its saved Parsley instance\r\n  var savedparsleyFormInstance = this.$element.data('Parsley');\r\n  if (savedparsleyFormInstance) {\r\n\r\n    // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\r\n    if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\r\n      savedparsleyFormInstance.parent = parsleyFormInstance;\r\n      savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\r\n    }\r\n\r\n    if ('object' === typeof options) {\r\n      $.extend(savedparsleyFormInstance.options, options);\r\n    }\r\n\r\n    return savedparsleyFormInstance;\r\n  }\r\n\r\n  // Parsley must be instantiated with a DOM element or jQuery $element\r\n  if (!this.$element.length)\r\n    throw new Error('You must bind Parsley on an existing element.');\r\n\r\n  if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\r\n    throw new Error('Parent instance must be a ParsleyForm instance');\r\n\r\n  this.parent = parsleyFormInstance || window.Parsley;\r\n  return this.init(options);\r\n};\r\n\r\nParsleyFactory.prototype = {\r\n  init: function (options) {\r\n    this.__class__ = 'Parsley';\r\n    this.__version__ = '@@version';\r\n    this.__id__ = ParsleyUtils.generateID();\r\n\r\n    // Pre-compute options\r\n    this._resetOptions(options);\r\n\r\n    // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\r\n    if (this.$element.is('form') || (ParsleyUtils.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\r\n      return this.bind('parsleyForm');\r\n\r\n    // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\r\n    return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\r\n  },\r\n\r\n  isMultiple: function () {\r\n    return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\r\n  },\r\n\r\n  // Multiples fields are a real nightmare :(\r\n  // Maybe some refactoring would be appreciated here...\r\n  handleMultiple: function () {\r\n    var name;\r\n    var multiple;\r\n    var parsleyMultipleInstance;\r\n\r\n    // Handle multiple name\r\n    if (this.options.multiple)\r\n      ; // We already have our 'multiple' identifier\r\n    else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\r\n      this.options.multiple = name = this.$element.attr('name');\r\n    else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\r\n      this.options.multiple = this.$element.attr('id');\r\n\r\n    // Special select multiple input\r\n    if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\r\n      this.options.multiple = this.options.multiple || this.__id__;\r\n      return this.bind('parsleyFieldMultiple');\r\n\r\n    // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\r\n    } else if (!this.options.multiple) {\r\n      ParsleyUtils.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\r\n      return this;\r\n    }\r\n\r\n    // Remove special chars\r\n    this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\r\n\r\n    // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\r\n    if ('undefined' !== typeof name) {\r\n      $('input[name=\"' + name + '\"]').each((i, input) => {\r\n        if ($(input).is('input[type=radio], input[type=checkbox]'))\r\n          $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\r\n      });\r\n    }\r\n\r\n    // Check here if we don't already have a related multiple instance saved\r\n    var $previouslyRelated = this._findRelated();\r\n    for (var i = 0; i < $previouslyRelated.length; i++) {\r\n      parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\r\n      if ('undefined' !== typeof parsleyMultipleInstance) {\r\n\r\n        if (!this.$element.data('ParsleyFieldMultiple')) {\r\n          parsleyMultipleInstance.addElement(this.$element);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\r\n    // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\r\n    this.bind('parsleyField', true);\r\n\r\n    return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\r\n  },\r\n\r\n  // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\r\n  bind: function (type, doNotStore) {\r\n    var parsleyInstance;\r\n\r\n    switch (type) {\r\n      case 'parsleyForm':\r\n        parsleyInstance = $.extend(\r\n          new ParsleyForm(this.$element, this.domOptions, this.options),\r\n          new ParsleyAbstract(),\r\n          window.ParsleyExtend\r\n        )._bindFields();\r\n        break;\r\n      case 'parsleyField':\r\n        parsleyInstance = $.extend(\r\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\r\n          new ParsleyAbstract(),\r\n          window.ParsleyExtend\r\n        );\r\n        break;\r\n      case 'parsleyFieldMultiple':\r\n        parsleyInstance = $.extend(\r\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\r\n          new ParsleyMultiple(),\r\n          new ParsleyAbstract(),\r\n          window.ParsleyExtend\r\n        )._init();\r\n        break;\r\n      default:\r\n        throw new Error(type + 'is not a supported Parsley type');\r\n    }\r\n\r\n    if (this.options.multiple)\r\n      ParsleyUtils.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\r\n\r\n    if ('undefined' !== typeof doNotStore) {\r\n      this.$element.data('ParsleyFieldMultiple', parsleyInstance);\r\n\r\n      return parsleyInstance;\r\n    }\r\n\r\n    // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\r\n    this.$element.data('Parsley', parsleyInstance);\r\n\r\n    // Tell the world we have a new ParsleyForm or ParsleyField instance!\r\n    parsleyInstance._actualizeTriggers();\r\n    parsleyInstance._trigger('init');\r\n\r\n    return parsleyInstance;\r\n  }\r\n};\r\n\r\nexport default ParsleyFactory;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\nimport ParsleyDefaults from './defaults';\r\nimport ParsleyAbstract from './abstract';\r\nimport ParsleyValidatorRegistry from './validator_registry';\r\nimport ParsleyUI from './ui';\r\nimport ParsleyForm from './form';\r\nimport ParsleyField from './field';\r\nimport ParsleyMultiple from './multiple';\r\nimport ParsleyFactory from './factory';\r\n\r\nvar vernums = $.fn.jquery.split('.');\r\nif (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\r\n  throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\r\n}\r\nif (!vernums.forEach) {\r\n  ParsleyUtils.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\r\n}\r\n// Inherit `on`, `off` & `trigger` to Parsley:\r\nvar Parsley = $.extend(new ParsleyAbstract(), {\r\n    $element: $(document),\r\n    actualizeOptions: null,\r\n    _resetOptions: null,\r\n    Factory: ParsleyFactory,\r\n    version: '@@version'\r\n  });\r\n\r\n// Supplement ParsleyField and Form with ParsleyAbstract\r\n// This way, the constructors will have access to those methods\r\n$.extend(ParsleyField.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);\r\n$.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);\r\n// Inherit actualizeOptions and _resetOptions:\r\n$.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\r\n\r\n// ### jQuery API\r\n// `$('.elem').parsley(options)` or `$('.elem').psly(options)`\r\n$.fn.parsley = $.fn.psly = function (options) {\r\n  if (this.length > 1) {\r\n    var instances = [];\r\n\r\n    this.each(function () {\r\n      instances.push($(this).parsley(options));\r\n    });\r\n\r\n    return instances;\r\n  }\r\n\r\n  // Return undefined if applied to non existing DOM element\r\n  if (!$(this).length) {\r\n    ParsleyUtils.warn('You must bind Parsley on an existing element.');\r\n\r\n    return;\r\n  }\r\n\r\n  return new ParsleyFactory(this, options);\r\n};\r\n\r\n// ### ParsleyField and ParsleyForm extension\r\n// Ensure the extension is now defined if it wasn't previously\r\nif ('undefined' === typeof window.ParsleyExtend)\r\n  window.ParsleyExtend = {};\r\n\r\n// ### Parsley config\r\n// Inherit from ParsleyDefault, and copy over any existing values\r\nParsley.options = $.extend(ParsleyUtils.objectCreate(ParsleyDefaults), window.ParsleyConfig);\r\nwindow.ParsleyConfig = Parsley.options; // Old way of accessing global options\r\n\r\n// ### Globals\r\nwindow.Parsley = window.psly = Parsley;\r\nwindow.ParsleyUtils = ParsleyUtils;\r\n\r\n// ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\r\nvar registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\r\nwindow.ParsleyValidator = {};\r\n$.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\r\n  window.Parsley[method] = $.proxy(registry, method);\r\n  window.ParsleyValidator[method] = function () {\r\n    ParsleyUtils.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\r\n    return window.Parsley[method](...arguments);\r\n  };\r\n});\r\n\r\n// ### ParsleyUI\r\n// Deprecated global object\r\nwindow.Parsley.UI = ParsleyUI;\r\nwindow.ParsleyUI = {\r\n  removeError: function (instance, name, doNotUpdateClass) {\r\n    var updateClass = true !== doNotUpdateClass;\r\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n    return instance.removeError(name, {updateClass});\r\n  },\r\n  getErrorsMessages: function (instance) {\r\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\r\n    return instance.getErrorsMessages();\r\n  }\r\n};\r\n$.each('addError updateError'.split(' '), function (i, method) {\r\n  window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\r\n    var updateClass = true !== doNotUpdateClass;\r\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n    return instance[method](name, {message, assert, updateClass});\r\n  };\r\n});\r\n\r\n// ### PARSLEY auto-binding\r\n// Prevent it by setting `ParsleyConfig.autoBind` to `false`\r\nif (false !== window.ParsleyConfig.autoBind) {\r\n  $(function () {\r\n    // Works only on `data-parsley-validate`.\r\n    if ($('[data-parsley-validate]').length)\r\n      $('[data-parsley-validate]').parsley();\r\n  });\r\n}\r\n\r\nexport default Parsley;\r\n","import $ from 'jquery';\r\n\r\nimport Parsley from './main';\r\n\r\n$.extend(true, Parsley, {\r\n  asyncValidators: {\r\n    'default': {\r\n      fn: function (xhr) {\r\n        // By default, only status 2xx are deemed successful.\r\n        // Note: we use status instead of state() because responses with status 200\r\n        // but invalid messages (e.g. an empty body for content type set to JSON) will\r\n        // result in state() === 'rejected'.\r\n        return xhr.status >= 200 && xhr.status < 300;\r\n      },\r\n      url: false\r\n    },\r\n    reverse: {\r\n      fn: function (xhr) {\r\n        // If reverse option is set, a failing ajax request is considered successful\r\n        return xhr.status < 200 || xhr.status >= 300;\r\n      },\r\n      url: false\r\n    }\r\n  },\r\n\r\n  addAsyncValidator: function (name, fn, url, options) {\r\n    Parsley.asyncValidators[name] = {\r\n      fn: fn,\r\n      url: url || false,\r\n      options: options || {}\r\n    };\r\n\r\n    return this;\r\n  }\r\n\r\n});\r\n\r\nParsley.addValidator('remote', {\r\n  requirementType: {\r\n    '': 'string',\r\n    'validator': 'string',\r\n    'reverse': 'boolean',\r\n    'options': 'object'\r\n  },\r\n\r\n  validateString: function (value, url, options, instance) {\r\n    var data = {};\r\n    var ajaxOptions;\r\n    var csr;\r\n    var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\r\n\r\n    if ('undefined' === typeof Parsley.asyncValidators[validator])\r\n      throw new Error('Calling an undefined async validator: `' + validator + '`');\r\n\r\n    url = Parsley.asyncValidators[validator].url || url;\r\n\r\n    // Fill current value\r\n    if (url.indexOf('{value}') > -1) {\r\n      url = url.replace('{value}', encodeURIComponent(value));\r\n    } else {\r\n      data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\r\n    }\r\n\r\n    // Merge options passed in from the function with the ones in the attribute\r\n    var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\r\n\r\n    // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\r\n    ajaxOptions = $.extend(true, {}, {\r\n      url: url,\r\n      data: data,\r\n      type: 'GET'\r\n    }, remoteOptions);\r\n\r\n    // Generate store key based on ajax options\r\n    instance.trigger('field:ajaxoptions', instance, ajaxOptions);\r\n\r\n    csr = $.param(ajaxOptions);\r\n\r\n    // Initialise querry cache\r\n    if ('undefined' === typeof Parsley._remoteCache)\r\n      Parsley._remoteCache = {};\r\n\r\n    // Try to retrieve stored xhr\r\n    var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\r\n\r\n    var handleXhr = function () {\r\n      var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\r\n      if (!result) // Map falsy results to rejected promise\r\n        result = $.Deferred().reject();\r\n      return $.when(result);\r\n    };\r\n\r\n    return xhr.then(handleXhr, handleXhr);\r\n  },\r\n\r\n  priority: -1\r\n});\r\n\r\nParsley.on('form:submit', function () {\r\n  Parsley._remoteCache = {};\r\n});\r\n\r\nwindow.ParsleyExtend.addAsyncValidator = function () {\r\n  ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\r\n  return Parsley.addAsyncValidator(...arguments);\r\n};\r\n","// This is included with the Parsley library itself,\r\n// thus there is no use in adding it to your project.\r\nimport Parsley from '../parsley/main';\r\n\r\nParsley.addMessages('en', {\r\n  defaultMessage: \"This value seems to be invalid.\",\r\n  type: {\r\n    email:        \"This value should be a valid email.\",\r\n    url:          \"This value should be a valid url.\",\r\n    number:       \"This value should be a valid number.\",\r\n    integer:      \"This value should be a valid integer.\",\r\n    digits:       \"This value should be digits.\",\r\n    alphanum:     \"This value should be alphanumeric.\"\r\n  },\r\n  notblank:       \"This value should not be blank.\",\r\n  required:       \"This value is required.\",\r\n  pattern:        \"This value seems to be invalid.\",\r\n  min:            \"This value should be greater than or equal to %s.\",\r\n  max:            \"This value should be lower than or equal to %s.\",\r\n  range:          \"This value should be between %s and %s.\",\r\n  minlength:      \"This value is too short. It should have %s characters or more.\",\r\n  maxlength:      \"This value is too long. It should have %s characters or fewer.\",\r\n  length:         \"This value length is invalid. It should be between %s and %s characters long.\",\r\n  mincheck:       \"You must select at least %s choices.\",\r\n  maxcheck:       \"You must select %s choices or fewer.\",\r\n  check:          \"You must select between %s and %s choices.\",\r\n  equalto:        \"This value should be the same.\"\r\n});\r\n\r\nParsley.setLocale('en');\r\n","import $ from 'jquery';\r\nimport Parsley from './parsley/main';\r\nimport './parsley/pubsub';\r\nimport './parsley/remote';\r\nimport './i18n/en';\r\nimport inputevent from './vendor/inputevent';\r\n\r\ninputevent.install();\r\n\r\nexport default Parsley;\r\n"],"sourceRoot":"/source/"}